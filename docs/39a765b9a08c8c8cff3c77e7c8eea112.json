{"posts": [{"title": "JCA Essentials: A Practical Guide to Java Cryptography (Hashing, Signing, Encryption)", "date": "2025-05-16T22:08:57+08.00", "path": "/archives/JCA-essentials/", "text": "\u6df1\u5165\u6d45\u51fa Java \u5bc6\u7801\u5b66\u67b6\u6784\uff08JCA\uff09\n1. \u5f15\u8a00\n\u5728\u5f53\u4eca\u6570\u5b57\u5316\u7684\u4e16\u754c\u91cc\uff0c\u5b89\u5168\u6027\u662f\u6784\u5efa\u53ef\u9760\u5e94\u7528\u4e0d\u53ef\u6216\u7f3a\u7684\u4e00\u73af\u3002\u5bf9\u4e8e Java \u5e73\u53f0\u800c\u8a00\uff0c\u5b89\u5168\u6027\u66f4\u662f\u5176\u6838\u5fc3\u8bbe\u8ba1\u7406\u5ff5\u4e4b\u4e00\u3002\u5b83\u6db5\u76d6\u4e86\u4ece\u8bed\u8a00\u5c42\u9762\u5230\u66f4\u9ad8\u7ea7\u522b\u7684\u5b89\u5168\u901a\u4fe1\u3001\u8eab\u4efd\u8ba4\u8bc1\u7b49\u8bf8\u591a\u9886\u57df\u3002\u800c Java \u5bc6\u7801\u5b66\u67b6\u6784\uff08JCA\uff09 \u6b63\u662f Java \u5e73\u53f0\u5b89\u5168\u4f53\u7cfb\u4e2d\u7684\u4e00\u4e2a\u5173\u952e\u7ec4\u4ef6\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u5957\u5f3a\u5927\u800c\u7075\u6d3b\u7684 API\uff0c\u4f7f\u5f97\u5f00\u53d1\u8005\u80fd\u591f\u8f7b\u677e\u5730\u5728\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u96c6\u6210\u5404\u79cd\u5bc6\u7801\u5b66\u529f\u80fd\uff0c\u4f8b\u5982\u6570\u5b57\u7b7e\u540d\u3001\u6d88\u606f\u6458\u8981\uff08\u54c8\u5e0c\uff09\u3001\u6570\u636e\u52a0\u89e3\u5bc6\u3001\u5bc6\u94a5\u751f\u6210\u4e0e\u7ba1\u7406\uff0c\u4ee5\u53ca\u5b89\u5168\u968f\u673a\u6570\u751f\u6210\u7b49\u3002JCA \u7684\u8bbe\u8ba1\u7406\u5ff5\u72ec\u5177\u5320\u5fc3\uff0c\u4e3b\u8981\u56f4\u7ed5\u4ee5\u4e0b\u4e09\u4e2a\u6838\u5fc3\u539f\u5219\u6784\u5efa\uff1a\n\u5b9e\u73b0\u72ec\u7acb\u6027\uff1a \u5f00\u53d1\u8005\u65e0\u9700\u5173\u6ce8\u5e95\u5c42\u5b89\u5168\u7b97\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\uff0c\u53ea\u9700\u901a\u8fc7\u6807\u51c6\u7684 Java API \u8bf7\u6c42\u6240\u9700\u7684\u5b89\u5168\u670d\u52a1\u3002\u5177\u4f53\u7684\u5b9e\u73b0\u7531\u4e0d\u540c\u7684 Provider \u63d0\u4f9b\uff0c\u8fd9\u4f7f\u5f97\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f9d\u8d56\u4e0d\u540c\u7684 Provider\uff0c\u63d0\u9ad8\u4e86\u7075\u6d3b\u6027\u3002\n\u5b9e\u73b0\u4e92\u64cd\u4f5c\u6027\uff1a \u4e0d\u540c\u7684 Provider \u5b9e\u73b0\u80fd\u591f\u534f\u540c\u5de5\u4f5c\uff0c\u4f8b\u5982\u4e00\u4e2a Provider \u751f\u6210\u7684\u5bc6\u94a5\u53ef\u4ee5\u88ab\u53e6\u4e00\u4e2a Provider \u4f7f\u7528\uff0c\u6216\u8005\u4e00\u4e2a Provider \u751f\u6210\u7684\u7b7e\u540d\u53ef\u4ee5\u88ab\u53e6\u4e00\u4e2a Provider \u9a8c\u8bc1\u3002\n\u7b97\u6cd5\u53ef\u6269\u5c55\u6027\uff1a JCA \u652f\u6301\u96c6\u6210\u65b0\u7684\u6216\u81ea\u5b9a\u4e49\u7684\u5b89\u5168\u7b97\u6cd5\u5b9e\u73b0\uff0c\u5141\u8bb8\u5f00\u53d1\u8005\u6839\u636e\u9700\u6c42\u5b89\u88c5\u548c\u4f7f\u7528\u7b2c\u4e09\u65b9 Provider\u3002\n\n\u672c\u6587\u5c06\u5e26\u60a8\u6df1\u5165\u4e86\u89e3 JCA \u7684\u67b6\u6784\u548c\u6838\u5fc3\u6982\u5ff5\uff0c\u5e76\u901a\u8fc7\u5e38\u89c1\u7684\u529f\u80fd\u793a\u4f8b\uff08\u5982\u52a0\u89e3\u5bc6\u3001\u6d88\u606f\u6458\u8981\u3001\u6570\u5b57\u7b7e\u540d\uff09\uff0c\u6f14\u793a\u5982\u4f55\u5728 Java \u5e94\u7528\u4e2d\u5b9e\u9645\u4f7f\u7528 JCA\uff0c\u5e2e\u52a9\u60a8\u66f4\u597d\u5730\u5229\u7528\u8fd9\u4e00\u5f3a\u5927\u7684\u5b89\u5168\u5de5\u5177\u30022. JCA \u67b6\u6784\u6982\u8ff0\nJCA \u7684\u6838\u5fc3\u9b45\u529b\u5728\u4e8e\u5176\u7075\u6d3b\u7684\u67b6\u6784\uff0c\u5b83\u5de7\u5999\u5730\u5c06\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u4e0e\u5e95\u5c42\u52a0\u5bc6\u7b97\u6cd5\u5b9e\u73b0\u89e3\u8026\u3002\u8fd9\u79cd\u89e3\u8026\u4e3b\u8981\u901a\u8fc7\u4ee5\u4e0b\u4e24\u4e2a\u5173\u952e\u673a\u5236\u5b9e\u73b0\uff1aProvider \u67b6\u6784 \u548c \u5f15\u64ce\u7c7b/SPI \u8bbe\u8ba1\u3002Provider \u67b6\u6784\uff1a\u5b89\u5168\u80fd\u529b\u7684\u63d0\u4f9b\u8005\n\u6b63\u5982\u5f15\u8a00\u4e2d\u6240\u8ff0\uff0cProvider \u662f JCA \u67b6\u6784\u7684\u57fa\u77f3\u3002\u5b83\u662f\u4e00\u4e2a\u8f6f\u4ef6\u5305\u7684\u96c6\u5408\uff0c\u5305\u542b\u4e86\u7279\u5b9a\u5b89\u5168\u670d\u52a1\uff08\u5982\u6570\u5b57\u7b7e\u540d\u3001\u52a0\u5bc6\u7b49\uff09\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u6bcf\u4e2a Provider \u90fd\u662f java.security.Provider \u7c7b\u7684\u5b50\u7c7b\uff0c\u5e76\u5728\u5176\u4e2d\u6ce8\u518c\u4e86\u5176\u63d0\u4f9b\u7684\u5404\u79cd\u5b89\u5168\u7b97\u6cd5\u548c\u670d\u52a1\u7684\u6620\u5c04\u5173\u7cfb\u3002\u5f53\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u6267\u884c\u67d0\u4e2a\u5bc6\u7801\u5b66\u64cd\u4f5c\u65f6\uff0c\u5b83\u4e0d\u662f\u76f4\u63a5\u8c03\u7528\u7b97\u6cd5\u5b9e\u73b0\uff0c\u800c\u662f\u5411 JCA \u6846\u67b6\u8bf7\u6c42\u8be5\u64cd\u4f5c\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u8bf7\u6c42\u65f6\u9700\u8981\u6307\u5b9a\u7b97\u6cd5\u540d\u79f0\uff08\u4f8b\u5982\uff1a\u201cSHA-256\u201d\u3001\u201cAES\u201d\uff09\u3002\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u9009\u62e9\u662f\u5426\u6307\u5b9a\u4e00\u4e2a\u7279\u5b9a\u7684 Provider \u540d\u79f0\u6765\u83b7\u53d6\u5b9e\u73b0\u3002\n\u4e0d\u6307\u5b9a Provider\uff1a \u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u53ea\u6307\u5b9a\u7b97\u6cd5\u540d\u79f0\uff0cJCA \u6846\u67b6\u4f1a\u6309\u7167\u9884\u8bbe\u7684\u4f18\u5148\u7ea7\u987a\u5e8f\u641c\u7d22\u6240\u6709\u5df2\u5b89\u88c5\u7684 Provider\uff0c\u67e5\u627e\u7b2c\u4e00\u4e2a\u652f\u6301\u8be5\u7b97\u6cd5\u7684 Provider\uff0c\u5e76\u8fd4\u56de\u5176\u5b9e\u73b0\u5b9e\u4f8b\u3002\n\u6307\u5b9a Provider\uff1a \u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u660e\u786e\u6307\u5b9a\u4e86 Provider \u7684\u540d\u79f0\uff0cJCA \u6846\u67b6\u4f1a\u76f4\u63a5\u8bf7\u6c42\u8be5 Provider \u63d0\u4f9b\u7b97\u6cd5\u5b9e\u73b0\u3002\u5373\u4f7f\u6709\u5176\u4ed6\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684 Provider \u4e5f\u652f\u6301\u8be5\u7b97\u6cd5\uff0c\u6846\u67b6\u4e5f\u4f1a\u4f18\u5148\u4f7f\u7528\u6307\u5b9a\u7684 Provider\u3002\n\n\u8fd9\u79cd\u673a\u5236\u4f7f\u5f97\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u5728\u4e0d\u4fee\u6539\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\uff0c\u7075\u6d3b\u5730\u5207\u6362\u6216\u66f4\u65b0\u5e95\u5c42\u5b89\u5168\u7b97\u6cd5\u7684\u5b9e\u73b0\u3002\u60f3\u8c61\u4e00\u4e0b\uff0c\u5f53\u67d0\u4e2a\u7b97\u6cd5\u51fa\u73b0\u66f4\u9ad8\u6548\u6216\u66f4\u5b89\u5168\u7684\u5b9e\u73b0\u65f6\uff0c\u53ea\u9700\u5b89\u88c5\u65b0\u7684 Provider \u5e76\u8c03\u6574\u5176\u4f18\u5148\u7ea7\uff0c\u5e94\u7528\u7a0b\u5e8f\u5c31\u80fd\u81ea\u52a8\u4f7f\u7528\u65b0\u7684\u5b9e\u73b0\u3002\u5f53\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u83b7\u53d6\u67d0\u4e2a\u7279\u5b9a\u7b97\u6cd5\u7684\u5b9e\u73b0\u65f6\uff0c\u901a\u5e38\u4f1a\u8c03\u7528\u76f8\u5e94\u5f15\u64ce\u7c7b\u7684\u9759\u6001\u5de5\u5382\u65b9\u6cd5 getInstance()\u3002\u8fd9\u4e2a\u65b9\u6cd5\u662f JCA \u6846\u67b6\u67e5\u627e\u5e76\u5b9e\u4f8b\u5316 Provider \u5b9e\u73b0\u7684\u5165\u53e3\u70b9\u3002\u4f8b\u5982\uff0c\u8981\u83b7\u53d6\u4e00\u4e2a\u7528\u4e8e\u8ba1\u7b97 SHA-256 \u6d88\u606f\u6458\u8981\u7684\u5bf9\u8c61\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 MessageDigest \u7c7b\u7684 getInstance() \u65b9\u6cd5\uff1a// \u4e0d\u6307\u5b9a Provider\uff0c\u8ba9 JCA \u6846\u67b6\u81ea\u52a8\u9009\u62e9\nMessageDigest md1 = MessageDigest.getInstance(&quot;SHA-256&quot;);\n\n// \u6307\u5b9a\u4f7f\u7528\u540d\u4e3a &quot;ProviderC&quot; \u7684 Provider\nMessageDigest md2 = MessageDigest.getInstance(&quot;SHA-256&quot;, &quot;ProviderC&quot;);\n\n\u7b2c\u4e00\u884c\u4ee3\u7801\u8bf7\u6c42\u4e00\u4e2a\u201cSHA-256\u201d\u7b97\u6cd5\u7684 MessageDigest \u5b9e\u73b0\uff0c\u4f46\u6ca1\u6709\u6307\u5b9a\u7531\u54ea\u4e2a Provider \u63d0\u4f9b\u3002\u6b64\u65f6\uff0cJCA \u6846\u67b6\u4f1a\u6309\u7167\u5df2\u5b89\u88c5 Provider \u7684\u4f18\u5148\u7ea7\u987a\u5e8f\u8fdb\u884c\u641c\u7d22\u3002\u5982\u4e0b\u56fe\uff08\u56fe\u793a 1\uff09\u6240\u793a\uff0c\u5047\u8bbe\u7cfb\u7edf\u4e2d\u5b89\u88c5\u4e86\u4e09\u4e2a Provider\uff0cProviderB \u662f\u7b2c\u4e00\u4e2a\u652f\u6301 SHA-256 \u7b97\u6cd5\u7684\uff08\u5c3d\u7ba1 ProviderC \u4e5f\u652f\u6301\uff09\uff0c\u56e0\u6b64\u6846\u67b6\u4f1a\u8fd4\u56de ProviderB \u63d0\u4f9b\u7684\u5b9e\u73b0\u3002diagram showing an application requesting an SHA-256 algorithem without specifying a provider name\u7b2c\u4e8c\u884c\u4ee3\u7801\u5219\u660e\u786e\u6307\u5b9a\u8981\u4f7f\u7528\u540d\u4e3a &quot;ProviderC&quot; \u7684 Provider \u6765\u83b7\u53d6 SHA-256 \u7b97\u6cd5\u7684\u5b9e\u73b0\u3002\u5982\u4e0b\u56fe\uff08\u56fe\u793a 2\uff09\u6240\u793a\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cJCA \u6846\u67b6\u4f1a\u76f4\u63a5\u8bf7\u6c42 ProviderC \u63d0\u4f9b\u5b9e\u73b0\uff0c\u5373\u4f7f\u5b58\u5728\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684 Provider\uff08\u5982 ProviderB\uff09\u4e5f\u652f\u6301\u8be5\u7b97\u6cd5\u3002diagram showing an application requesting an SHA-256 algorithem from a specific provider\u8fd9\u79cd\u7075\u6d3b\u7684\u9009\u62e9\u673a\u5236\u662f JCA \u67b6\u6784\u7684\u6838\u5fc3\u4f18\u52bf\u4e4b\u4e00\uff0c\u5b83\u4f7f\u5f97\u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u9002\u5e94\u4e0d\u540c\u7684\u5b89\u5168\u73af\u5883\u548c\u9700\u6c42\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u901a\u7528\u5e94\u7528\u800c\u8a00\uff0c\u4e0d\u6307\u5b9a Provider \u662f\u66f4\u597d\u7684\u9009\u62e9\uff0c\u8fd9\u6837\u53ef\u4ee5\u5229\u7528\u7cfb\u7edf\u5f53\u524d\u73af\u5883\u4e0b\u6700\u4f18\uff08\u4f18\u5148\u7ea7\u6700\u9ad8\uff09\u7684\u5b9e\u73b0\uff0c\u4f8b\u5982\u53ef\u80fd\u5305\u542b\u4e86\u786c\u4ef6\u52a0\u901f\u6216\u9488\u5bf9\u7279\u5b9a\u64cd\u4f5c\u7cfb\u7edf\u4f18\u5316\u7684 Provider\u3002\u53ea\u6709\u5728\u9700\u8981\u4f7f\u7528\u7279\u5b9a Provider\uff08\u4f8b\u5982\u51fa\u4e8e\u5408\u89c4\u6027\u8981\u6c42\u4f7f\u7528\u7ecf\u8fc7\u8ba4\u8bc1\u7684 Provider\uff09\u65f6\uff0c\u624d\u5e94\u8be5\u660e\u786e\u6307\u5b9a\u3002\u5f15\u64ce\u7c7b\u4e0e SPI\uff1aAPI \u4e0e\u5b9e\u73b0\u7684\u6865\u6881\nJCA \u4e0d\u4ec5\u5b9a\u4e49\u4e86 Provider \u5982\u4f55\u63d0\u4f9b\u670d\u52a1\uff0c\u8fd8\u901a\u8fc7\u4e00\u5957\u7cbe\u5de7\u7684\u8bbe\u8ba1\uff0c\u5b9e\u73b0\u4e86\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u4e0e\u5177\u4f53\u7b97\u6cd5\u7684\u7b97\u6cd5\u72ec\u7acb\u6027\u3002\u8fd9\u4e3b\u8981\u5f97\u76ca\u4e8e\u5f15\u64ce\u7c7b\uff08Engine Classes\uff09\u548c\u670d\u52a1 Provider \u63a5\u53e3\uff08Service Provider Interfaces, SPI\uff09\u7684\u8bbe\u8ba1\u3002\u5f15\u64ce\u7c7b\u662f JCA \u63d0\u4f9b\u7ed9\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u7684\u6807\u51c6 API \u63a5\u53e3\uff0c\u5b83\u4eec\u4ee3\u8868\u4e86\u7279\u5b9a\u7c7b\u578b\u7684\u5bc6\u7801\u5b66\u670d\u52a1\uff0c\u4f8b\u5982\uff1a\nMessageDigest: \u7528\u4e8e\u8ba1\u7b97\u6570\u636e\u7684\u6d88\u606f\u6458\u8981\uff08\u54c8\u5e0c\uff09\u3002\nSignature: \u7528\u4e8e\u751f\u6210\u6216\u9a8c\u8bc1\u6570\u5b57\u7b7e\u540d\u3002\nCipher: \u7528\u4e8e\u6570\u636e\u7684\u52a0\u5bc6\u548c\u89e3\u5bc6\u3002\nKeyPairGenerator: \u7528\u4e8e\u751f\u6210\u516c\u79c1\u94a5\u5bf9\u3002\nKeyGenerator: \u7528\u4e8e\u751f\u6210\u79d8\u5bc6\u5bc6\u94a5\u3002\nKeyFactory: \u7528\u4e8e\u5728\u4e0d\u540c\u5bc6\u94a5\u8868\u793a\u5f62\u5f0f\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002\nKeyStore: \u7528\u4e8e\u7ba1\u7406\u5bc6\u94a5\u548c\u8bc1\u4e66\u7684\u5b58\u50a8\u5e93\u3002\n\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u7c7b\uff0c\u5982 SecureRandom, AlgorithmParameters \u7b49\u3002\n\n\u8fd9\u4e9b\u5f15\u64ce\u7c7b\u63d0\u4f9b\u4e86\u4e00\u7ec4\u6807\u51c6\u7684\u3001\u4e0e\u5177\u4f53\u7b97\u6cd5\u5b9e\u73b0\u65e0\u5173\u7684\u65b9\u6cd5\u4f9b\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528\u3002\u5f00\u53d1\u8005\u901a\u8fc7\u8fd9\u4e9b\u7edf\u4e00\u7684 API \u63a5\u53e3\u6765\u4f7f\u7528\u5bc6\u7801\u5b66\u529f\u80fd\uff0c\u800c\u65e0\u9700\u4e86\u89e3\u5e95\u5c42\u662f\u54ea\u79cd\u7b97\u6cd5\uff08\u4f8b\u5982\u662f AES \u8fd8\u662f DES \u8fdb\u884c\u52a0\u5bc6\uff09\u6216\u8005\u662f\u7531\u54ea\u4e2a Provider \u63d0\u4f9b\u7684\u5b9e\u73b0\u3002\u4e0e\u6bcf\u4e2a\u5f15\u64ce\u7c7b\u76f8\u5bf9\u5e94\u7684\u662f\u4e00\u4e2a\u62bd\u8c61\u7684 \u670d\u52a1 Provider \u63a5\u53e3\uff08SPI\uff09 \u7c7b\u3002\u8fd9\u4e9b SPI \u7c7b\u5b9a\u4e49\u4e86 Provider \u5728\u5b9e\u73b0\u7279\u5b9a\u7c7b\u578b\u7684\u5b89\u5168\u670d\u52a1\u65f6\u5fc5\u987b\u63d0\u4f9b\u7684\u65b9\u6cd5\u3002\u901a\u5e38\uff0cSPI \u7c7b\u7684\u540d\u79f0\u662f\u5728\u5176\u5bf9\u5e94\u7684\u5f15\u64ce\u7c7b\u540d\u79f0\u540e\u52a0\u4e0a Spi\uff0c\u4f8b\u5982 MessageDigestSpi\u3001SignatureSpi\u3001CipherSpi \u7b49\u3002Provider \u4e2d\u63d0\u4f9b\u5177\u4f53\u7b97\u6cd5\u5b9e\u73b0\u7684\u7c7b\uff0c\u5c31\u662f\u7ee7\u627f\u81ea\u8fd9\u4e9b SPI \u7c7b\u5e76\u5b9e\u73b0\u4e86\u5176\u4e2d\u7684\u62bd\u8c61\u65b9\u6cd5\u3002JCA \u6846\u67b6\u5145\u5f53\u4e86\u5e94\u7528\u7a0b\u5e8f\u5f15\u64ce\u7c7b\u8c03\u7528\u548c Provider SPI \u5b9e\u73b0\u4e4b\u95f4\u7684\u201c\u6865\u6881\u201d\u3002\u5f53\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7 getInstance() \u65b9\u6cd5\u8bf7\u6c42\u4e00\u4e2a\u5f15\u64ce\u7c7b\u5b9e\u4f8b\u65f6\uff0cJCA \u6846\u67b6\u4f1a\u6839\u636e\u524d\u9762\u63d0\u5230\u7684 Provider \u9009\u62e9\u673a\u5236\uff0c\u627e\u5230\u5408\u9002\u7684 Provider \u53ca\u5176\u5bf9\u5e94\u7684 SPI \u5b9e\u73b0\u7c7b\u3002\u6846\u67b6\u4f1a\u5b9e\u4f8b\u5316\u8fd9\u4e2a SPI \u5b9e\u73b0\u7c7b\uff0c\u5e76\u5c06\u5176\u201c\u5c01\u88c5\u201d\u5728\u4e00\u4e2a\u65b0\u7684\u5f15\u64ce\u7c7b\u5bf9\u8c61\u5185\u90e8\u3002\u4e4b\u540e\uff0c\u5f53\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528\u5f15\u64ce\u7c7b\u5bf9\u8c61\u4e0a\u7684 API \u65b9\u6cd5\uff08\u4f8b\u5982 Cipher \u5bf9\u8c61\u7684 init()\u3001update()\u3001doFinal() \u65b9\u6cd5\uff09\u65f6\uff0c\u5f15\u64ce\u7c7b\u4f1a\u5c06\u8fd9\u4e9b\u8c03\u7528\u8f6c\u53d1\uff08\u6216\u79f0\u4e3a\u201c\u8def\u7531\u201d\uff09\u7ed9\u5176\u5185\u90e8\u5c01\u88c5\u7684 SPI \u5b9e\u73b0\u5bf9\u8c61\u4e2d\u5bf9\u5e94\u7684\u65b9\u6cd5\uff08\u4f8b\u5982 CipherSpi \u5b9e\u73b0\u4e2d\u7684 engineInit()\u3001engineUpdate()\u3001engineDoFinal() \u65b9\u6cd5\uff09\u3002\u771f\u6b63\u7684\u5bc6\u7801\u5b66\u8ba1\u7b97\u5c31\u7531 Provider \u5b9e\u73b0\u7684\u8fd9\u4e9b SPI \u65b9\u6cd5\u6765\u5b8c\u6210\u3002\u8fd9\u79cd\u6a21\u5f0f\u786e\u4fdd\u4e86\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u53ea\u4e0e\u6807\u51c6\u7684\u5f15\u64ce\u7c7b API \u4ea4\u4e92\uff0c\u800c\u5e95\u5c42\u7684\u7b97\u6cd5\u5b9e\u73b0\u5219\u7531 Provider \u63d0\u4f9b\u5e76\u901a\u8fc7 SPI \u63a5\u53e3\u63a5\u5165\u3002\u8fd9\u5b8c\u7f8e\u5730\u4f53\u73b0\u4e86 JCA \u7684\u7b97\u6cd5\u72ec\u7acb\u6027\u548c\u5b9e\u73b0\u72ec\u7acb\u6027\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u7b80\u5316\u7684\u6d41\u7a0b\u56fe\u6765\u8868\u793a\u8fd9\u4e2a\u8c03\u7528\u8fc7\u7a0b\uff1aimport javax.crypto.*;\n\nCipher c = Cipher.getInstance(&quot;AES&quot;);\nc.init(ENCRYPT_MODE, key);\n\nExample of How Application Retrieves AES Cipher Intstance\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5e94\u7528\u7a0b\u5e8f\u8bf7\u6c42 Cipher \u5b9e\u4f8b\uff08\u4f8b\u5982 &quot;AES&quot;\uff09\uff0cJCA \u6846\u67b6\u627e\u5230 Provider \u4e2d\u7684 CipherSpi \u5b9e\u73b0\u7c7b\uff08\u4f8b\u5982 com.foo.AESCipher\uff09\uff0c\u5b9e\u4f8b\u5316\u540e\u5c01\u88c5\u5728 Cipher \u5bf9\u8c61\u4e2d\u8fd4\u56de\u3002\u5e94\u7528\u7a0b\u5e8f\u5bf9 Cipher \u5bf9\u8c61\u8fdb\u884c\u7684\u64cd\u4f5c\uff08\u5982 init()\uff09\u5b9e\u9645\u4e0a\u662f\u8c03\u7528\u4e86\u5c01\u88c5\u7684 SPI \u5bf9\u8c61\u4e0a\u7684\u5bf9\u5e94\u65b9\u6cd5\uff08engineInit()\uff09\u3002\u901a\u8fc7 Provider \u67b6\u6784\u548c\u5f15\u64ce\u7c7b/SPI \u7684\u534f\u540c\u5de5\u4f5c\uff0cJCA \u6784\u5efa\u4e86\u4e00\u4e2a\u7075\u6d3b\u3001\u53ef\u6269\u5c55\u4e14\u6613\u4e8e\u4f7f\u7528\u7684\u5bc6\u7801\u5b66\u670d\u52a1\u6846\u67b6\u30023. JCA \u6838\u5fc3\u6982\u5ff5\u4e0e\u7c7b\n\u4e86\u89e3\u4e86 JCA \u7684 Provider \u67b6\u6784\u548c\u5f15\u64ce\u7c7b/SPI \u673a\u5236\u540e\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u805a\u7126\u4e8e JCA \u4e2d\u63d0\u4f9b\u5404\u79cd\u5bc6\u7801\u5b66\u529f\u80fd\u7684\u5177\u4f53\u6838\u5fc3\u7c7b\u548c\u63a5\u53e3\u3002\u5b83\u4eec\u662f\u60a8\u5728\u7f16\u5199\u5b89\u5168\u76f8\u5173\u4ee3\u7801\u65f6\u5c06\u76f4\u63a5\u6253\u4ea4\u9053\u7684\u6784\u5efa\u5757\u30021. \u5b89\u5168\u968f\u673a\u6570\u751f\u6210\uff1aSecureRandom\u5728\u5bc6\u7801\u5b66\u4e2d\uff0c\u968f\u673a\u6027\u81f3\u5173\u91cd\u8981\uff0c\u5c24\u5176\u662f\u5728\u751f\u6210\u5bc6\u94a5\u3001\u521d\u59cb\u5316\u5411\u91cf (IV) \u7b49\u573a\u666f\u3002java.security.SecureRandom \u7c7b\u662f\u4e00\u4e2a\u5f15\u64ce\u7c7b\uff0c\u4e13\u95e8\u7528\u4e8e\u751f\u6210\u52a0\u5bc6\u5f3a\u5ea6\u9ad8\u3001\u4e0d\u53ef\u9884\u6d4b\u7684\u968f\u673a\u6570\u3002\u4e0e\u666e\u901a\u7684 java.lang.Random \u4e0d\u540c\uff0cSecureRandom \u751f\u6210\u7684\u968f\u673a\u6570\u66f4\u96be\u4ee5\u88ab\u653b\u51fb\u8005\u9884\u6d4b\uff0c\u4ece\u800c\u589e\u5f3a\u4e86\u5b89\u5168\u6027\u3002\n\u521b\u5efa\u5b9e\u4f8b\uff1a \u901a\u5e38\u53ef\u4ee5\u4f7f\u7528\u65e0\u53c2\u6784\u9020\u51fd\u6570 new SecureRandom() \u83b7\u53d6\u9ed8\u8ba4\u7684\u5f3a\u968f\u673a\u6570\u751f\u6210\u5668\uff0c\u6216\u8005\u4f7f\u7528 getInstance() \u65b9\u6cd5\u83b7\u53d6\u7279\u5b9a\u7b97\u6cd5\u7684\u5b9e\u73b0\uff0c\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7 getInstanceStrong() \u83b7\u53d6\u7531\u7cfb\u7edf\u5c5e\u6027\u6307\u5b9a\u7684\u201c\u6700\u5f3a\u201d\u5b9e\u73b0\u3002\n\u8bbe\u7f6e\u79cd\u5b50\uff1a \u53ef\u4ee5\u4f7f\u7528 setSeed() \u65b9\u6cd5\u4e3a\u751f\u6210\u5668\u8bbe\u7f6e\u79cd\u5b50\uff0c\u8fd9\u6709\u52a9\u4e8e\u521d\u59cb\u5316\u751f\u6210\u5668\u7684\u5185\u90e8\u72b6\u6001\u3002\n\u751f\u6210\u968f\u673a\u5b57\u8282\uff1a \u4e3b\u8981\u901a\u8fc7 nextBytes(byte[] bytes) \u65b9\u6cd5\u5c06\u968f\u673a\u5b57\u8282\u586b\u5145\u5230\u6307\u5b9a\u7684\u5b57\u8282\u6570\u7ec4\u4e2d\u3002\n\n2. \u6d88\u606f\u6458\u8981\uff1aMessageDigest\u6d88\u606f\u6458\u8981\uff08\u6216\u79f0\u54c8\u5e0c\u3001\u6563\u5217\uff09\u662f\u4e00\u79cd\u5c06\u4efb\u610f\u957f\u5ea6\u7684\u6570\u636e\u6620\u5c04\u4e3a\u56fa\u5b9a\u957f\u5ea6\u201c\u6307\u7eb9\u201d\u7684\u6280\u672f\u3002\u5728 JCA \u4e2d\uff0cjava.security.MessageDigest \u7c7b\u63d0\u4f9b\u4e86\u6d88\u606f\u6458\u8981\u7684\u529f\u80fd\u3002\u6d88\u606f\u6458\u8981\u7684\u4e3b\u8981\u7279\u6027\u662f\u5fae\u5c0f\u7684\u6570\u636e\u6539\u52a8\u90fd\u4f1a\u5bfc\u81f4\u6458\u8981\u503c\u53d1\u751f\u663e\u8457\u53d8\u5316\uff0c\u4e14\u4ece\u6458\u8981\u503c\u53cd\u63a8\u51fa\u539f\u59cb\u6570\u636e\u5728\u8ba1\u7b97\u4e0a\u662f\u4e0d\u53ef\u884c\u7684\uff08\u5355\u5411\u6027\uff09\u3002\u8fd9\u4f7f\u5f97\u5b83\u975e\u5e38\u9002\u5408\u7528\u4e8e\u9a8c\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u6027\u3002\n\u521b\u5efa\u5b9e\u4f8b\uff1a \u4f7f\u7528 getInstance(String algorithm) \u65b9\u6cd5\u83b7\u53d6\u7279\u5b9a\u7b97\u6cd5\uff08\u5982 &quot;SHA-256&quot;\u3001&quot;MD5&quot;\uff09\u7684 MessageDigest \u5b9e\u4f8b\u3002\n\u5904\u7406\u6570\u636e\uff1a \u901a\u8fc7 update(byte[] input) \u6216 update(byte[] input, int offset, int len) \u65b9\u6cd5\u5411\u6458\u8981\u5bf9\u8c61\u63d0\u4f9b\u5f85\u5904\u7406\u7684\u6570\u636e\u3002\u53ef\u4ee5\u5206\u591a\u6b21\u8c03\u7528 update \u6765\u5904\u7406\u5927\u91cf\u6570\u636e\u3002\n\u8ba1\u7b97\u6458\u8981\uff1a \u8c03\u7528 digest() \u65b9\u6cd5\u5b8c\u6210\u8ba1\u7b97\u5e76\u8fd4\u56de\u6700\u7ec8\u7684\u6458\u8981\u5b57\u8282\u6570\u7ec4\u3002digest() \u65b9\u6cd5\u8c03\u7528\u540e\uff0cMessageDigest \u5bf9\u8c61\u4f1a\u81ea\u52a8\u91cd\u7f6e\uff0c\u53ef\u4ee5\u7528\u4e8e\u8ba1\u7b97\u65b0\u7684\u6570\u636e\u7684\u6458\u8981\u3002\n\n3. \u6570\u5b57\u7b7e\u540d\uff1aSignature\u6570\u5b57\u7b7e\u540d\u7528\u4e8e\u9a8c\u8bc1\u6570\u636e\u7684\u6765\u6e90\u548c\u5b8c\u6574\u6027\u3002\u5728 JCA \u4e2d\uff0cjava.security.Signature \u7c7b\u63d0\u4f9b\u4e86\u6570\u5b57\u7b7e\u540d\u548c\u9a8c\u8bc1\u7684\u529f\u80fd\u3002\u7b7e\u540d\u8fc7\u7a0b\u901a\u5e38\u4f7f\u7528\u79c1\u94a5\u5bf9\u6570\u636e\u7684\u54c8\u5e0c\u503c\u8fdb\u884c\u52a0\u5bc6\u751f\u6210\u7b7e\u540d\uff0c\u9a8c\u8bc1\u8fc7\u7a0b\u5219\u4f7f\u7528\u5bf9\u5e94\u7684\u516c\u94a5\u89e3\u5bc6\u7b7e\u540d\uff0c\u5e76\u4e0e\u5f85\u9a8c\u8bc1\u6570\u636e\u7684\u54c8\u5e0c\u503c\u8fdb\u884c\u6bd4\u5bf9\u3002Signature \u5bf9\u8c61\u5177\u6709\u4e0d\u540c\u7684\u72b6\u6001\uff1a\u672a\u521d\u59cb\u5316\u3001\u7b7e\u540d\uff08SIGN\uff09\u548c\u9a8c\u8bc1\uff08VERIFY\uff09\u3002\n\u521b\u5efa\u5b9e\u4f8b\uff1a \u4f7f\u7528 getInstance(String algorithm) \u65b9\u6cd5\u83b7\u53d6\u7279\u5b9a\u7b7e\u540d\u7b97\u6cd5\uff08\u5982 &quot;SHA256withDSA&quot;\u3001&quot;SHA256withRSA&quot;\uff09\u7684 Signature \u5b9e\u4f8b\u3002\n\u521d\u59cb\u5316\uff1a\n\u7b7e\u540d\uff1a \u4f7f\u7528\u79c1\u94a5\u901a\u8fc7 initSign(PrivateKey privateKey) \u65b9\u6cd5\u521d\u59cb\u5316\u5bf9\u8c61\u4e3a\u7b7e\u540d\u72b6\u6001\u3002\n\u9a8c\u8bc1\uff1a \u4f7f\u7528\u516c\u94a5\u901a\u8fc7 initVerify(PublicKey publicKey) \u6216 initVerify(Certificate certificate) \u65b9\u6cd5\u521d\u59cb\u5316\u5bf9\u8c61\u4e3a\u9a8c\u8bc1\u72b6\u6001\u3002\n\n\n\u5904\u7406\u6570\u636e\uff1a \u5728\u7b7e\u540d\u6216\u9a8c\u8bc1\u72b6\u6001\u4e0b\uff0c\u4f7f\u7528 update(byte[] data) \u65b9\u6cd5\u5411\u5bf9\u8c61\u63d0\u4f9b\u5f85\u7b7e\u540d\u6216\u9a8c\u8bc1\u7684\u6570\u636e\u3002\n\u6267\u884c\u64cd\u4f5c\uff1a\n\u7b7e\u540d\uff1a \u8c03\u7528 sign() \u65b9\u6cd5\u751f\u6210\u6570\u5b57\u7b7e\u540d\uff0c\u8fd4\u56de\u7b7e\u540d\u5b57\u8282\u6570\u7ec4\u3002\n\u9a8c\u8bc1\uff1a \u8c03\u7528 verify(byte[] signature) \u65b9\u6cd5\uff0c\u4f20\u5165\u5f85\u9a8c\u8bc1\u7684\u7b7e\u540d\uff0c\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u8868\u793a\u7b7e\u540d\u662f\u5426\u6709\u6548\u3002\n\n\n\n4. \u52a0\u89e3\u5bc6\uff1aCipher\u52a0\u89e3\u5bc6\u662f\u4fdd\u62a4\u6570\u636e\u673a\u5bc6\u6027\u7684\u624b\u6bb5\uff0c\u5728 JCA \u4e2d\uff0cjavax.crypto.Cipher \u7c7b\u63d0\u4f9b\u4e86\u52a0\u89e3\u5bc6\u529f\u80fd\u3002\u5b83\u652f\u6301\u5bf9\u79f0\u52a0\u5bc6\uff08\u4f7f\u7528\u540c\u4e00\u4e2a\u5bc6\u94a5\u8fdb\u884c\u52a0\u89e3\u5bc6\uff09\u548c\u975e\u5bf9\u79f0\u52a0\u5bc6\uff08\u4f7f\u7528\u516c\u79c1\u94a5\u5bf9\u8fdb\u884c\u52a0\u89e3\u5bc6\uff09\uff0c\u4ee5\u53ca\u5757\u52a0\u5bc6\u548c\u6d41\u52a0\u5bc6\u7b49\u591a\u79cd\u6a21\u5f0f\u3002\n\u521b\u5efa\u5b9e\u4f8b\uff1a \u4f7f\u7528 getInstance(String transformation) \u65b9\u6cd5\u83b7\u53d6 Cipher \u5b9e\u4f8b\u3002\u8fd9\u91cc\u7684 transformation \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u901a\u5e38\u683c\u5f0f\u4e3a &quot;\u7b97\u6cd5\u540d\u79f0/\u6a21\u5f0f/\u586b\u5145\u65b9\u5f0f&quot;\uff08\u4f8b\u5982 &quot;AES/CBC/PKCS5Padding&quot;\uff09\u6216\u4ec5\u7b97\u6cd5\u540d\u79f0\uff08\u4f8b\u5982 &quot;AES&quot;\uff09\u3002\n\u521d\u59cb\u5316\uff1a \u4f7f\u7528 init() \u65b9\u6cd5\u521d\u59cb\u5316 Cipher \u5bf9\u8c61\uff0c\u9700\u8981\u6307\u5b9a\u64cd\u4f5c\u6a21\u5f0f\uff08Cipher.ENCRYPT_MODE \u6216 Cipher.DECRYPT_MODE\uff09\u3001\u5bc6\u94a5\uff0c\u4ee5\u53ca\u53ef\u9009\u7684\u7b97\u6cd5\u53c2\u6570\uff08\u5982\u521d\u59cb\u5316\u5411\u91cf IV\uff09\u548c\u968f\u673a\u6e90\u3002\ninit(int opmode, Key key)\ninit(int opmode, Key key, AlgorithmParameterSpec params)\n\n\n\u5904\u7406\u6570\u636e\uff1a\n\u5355\u6b65\u64cd\u4f5c\uff1a \u5bf9\u4e8e\u5c11\u91cf\u6570\u636e\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 doFinal(byte[] input) \u6216 doFinal(byte[] input, int inputOffset, int inputLen) \u65b9\u6cd5\u8fdb\u884c\u4e00\u6b65\u52a0\u89e3\u5bc6\u3002\n\u591a\u6b65\u64cd\u4f5c\uff1a \u5bf9\u4e8e\u5927\u91cf\u6570\u636e\u6216\u6d41\u5f0f\u5904\u7406\uff0c\u53ef\u4ee5\u4f7f\u7528 update(byte[] input) \u65b9\u6cd5\u5206\u5757\u5904\u7406\u6570\u636e\uff0c\u6700\u540e\u8c03\u7528 doFinal() \u65b9\u6cd5\u5b8c\u6210\u6700\u7ec8\u7684\u52a0\u89e3\u5bc6\u548c\u5904\u7406\u5269\u4f59\u6570\u636e\uff08\u5305\u62ec\u586b\u5145/\u53bb\u586b\u5145\uff09\u3002\n\n\n\u8f85\u52a9\u7c7b\uff1a JCA \u8fd8\u63d0\u4f9b\u4e86 CipherInputStream \u548c CipherOutputStream \u7528\u4e8e\u6d41\u5f0f\u52a0\u89e3\u5bc6\uff0c\u4ee5\u53ca SealedObject \u7528\u4e8e\u5c01\u88c5\u548c\u4fdd\u62a4\u53ef\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u3002\n\n5. \u5bc6\u94a5\u8868\u793a\u4e0e\u7ba1\u7406\uff1aKey, KeySpec, KeyFactory, KeyGenerator, KeyPairGenerator, KeyStore\u5bc6\u94a5\u662f\u5bc6\u7801\u5b66\u64cd\u4f5c\u7684\u6838\u5fc3\u8981\u7d20\uff0cJCA \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7c7b\u548c\u63a5\u53e3\u6765\u8868\u793a\u3001\u751f\u6210\u548c\u7ba1\u7406\u5bc6\u94a5\u3002\n\u5bc6\u94a5\u63a5\u53e3 (Key, PublicKey, PrivateKey, SecretKey): java.security.Key \u662f\u6240\u6709\u5bc6\u94a5\u7684\u4e0d\u900f\u660e\u8868\u793a\u7684\u9876\u7ea7\u63a5\u53e3\u3002\u5b83\u5b9a\u4e49\u4e86\u5bc6\u94a5\u7684\u4e09\u4e2a\u57fa\u672c\u5c5e\u6027\uff1a\u7b97\u6cd5 (getAlgorithm())\u3001\u7f16\u7801\u683c\u5f0f (getFormat()) \u548c\u7f16\u7801\u540e\u7684\u5b57\u8282 (getEncoded())\u3002PublicKey \u548c PrivateKey \u5206\u522b\u8868\u793a\u975e\u5bf9\u79f0\u5bc6\u94a5\u5bf9\u4e2d\u7684\u516c\u94a5\u548c\u79c1\u94a5\uff0cjavax.crypto.SecretKey \u8868\u793a\u5bf9\u79f0\u5bc6\u94a5\u6216\u79d8\u5bc6\u5bc6\u94a5\u3002\u8fd9\u91cc\u7684\u201c\u4e0d\u900f\u660e\u201d\u610f\u5473\u7740\u60a8\u901a\u5e38\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\u6784\u6210\u5bc6\u94a5\u7684\u5177\u4f53\u6570\u503c\uff0c\u800c\u662f\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u5bf9\u8c61\u4f7f\u7528\u3002\n\u5bc6\u94a5\u5bf9 (KeyPair): java.security.KeyPair \u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5bb9\u5668\u7c7b\uff0c\u7528\u4e8e\u6301\u6709\u914d\u5bf9\u7684\u516c\u94a5 (getPublic()) \u548c\u79c1\u94a5 (getPrivate())\u3002\n\u5bc6\u94a5\u89c4\u8303 (KeySpec): java.security.spec.KeySpec \u63a5\u53e3\u53ca\u5176\u5b9e\u73b0\u7c7b\u63d0\u4f9b\u4e86\u5bc6\u94a5\u6750\u6599\u7684\u201c\u900f\u660e\u201d\u8868\u793a\u3002\u900f\u660e\u8868\u793a\u5141\u8bb8\u60a8\u8bbf\u95ee\u6784\u6210\u5bc6\u94a5\u7684\u5177\u4f53\u6570\u503c\u3002\u4f8b\u5982\uff0cDSAPrivateKeySpec \u5141\u8bb8\u8bbf\u95ee DSA \u79c1\u94a5\u7684\u5404\u4e2a\u7ec4\u6210\u90e8\u5206\uff08x, p, q, g\uff09\u3002EncodedKeySpec \u7684\u5b50\u7c7b\uff08\u5982 PKCS8EncodedKeySpec \u548c X509EncodedKeySpec\uff09\u8868\u793a\u5bc6\u94a5\u7684\u7f16\u7801\u683c\u5f0f\uff08\u5982 PKCS#8 \u7528\u4e8e\u79c1\u94a5\uff0cX.509 \u7528\u4e8e\u516c\u94a5\uff09\u3002javax.crypto.spec.SecretKeySpec \u662f\u4e00\u4e2a\u5e38\u7528\u7684\u7c7b\uff0c\u53ef\u4ee5\u7528\u5b57\u8282\u6570\u7ec4\u548c\u7b97\u6cd5\u540d\u79f0\u76f4\u63a5\u6784\u9020\u4e00\u4e2a SecretKey\u3002\n\u5bc6\u94a5\u5de5\u5382 (KeyFactory, SecretKeyFactory): java.security.KeyFactory\uff08\u7528\u4e8e\u516c\u94a5/\u79c1\u94a5\uff09\u548c javax.crypto.SecretKeyFactory\uff08\u7528\u4e8e\u79d8\u5bc6\u5bc6\u94a5\uff09\u662f\u5f15\u64ce\u7c7b\uff0c\u7528\u4e8e\u5728\u5bc6\u94a5\u7684\u4e0d\u900f\u660e\u8868\u793a (Key) \u548c\u900f\u660e\u8868\u793a (KeySpec) \u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002\u5b83\u4eec\u53ef\u4ee5\u4ece KeySpec \u751f\u6210 Key \u5bf9\u8c61\uff08generatePublic/Private/Secret(KeySpec keySpec)\uff09\uff0c\u4e5f\u53ef\u4ee5\u4ece Key \u5bf9\u8c61\u83b7\u53d6\u76f8\u5e94\u7684 KeySpec\uff08getKeySpec(Key key, Class keySpec)\uff09\u3002\n\u5bc6\u94a5\u751f\u6210\u5668 (KeyGenerator, KeyPairGenerator): javax.crypto.KeyGenerator\uff08\u7528\u4e8e\u79d8\u5bc6\u5bc6\u94a5\uff09\u548c java.security.KeyPairGenerator\uff08\u7528\u4e8e\u5bc6\u94a5\u5bf9\uff09\u662f\u5f15\u64ce\u7c7b\uff0c\u7528\u4e8e\u751f\u6210\u5168\u65b0\u7684\u5bc6\u94a5\u3002\u60a8\u53ef\u4ee5\u6307\u5b9a\u5bc6\u94a5\u5927\u5c0f\u548c\u968f\u673a\u6e90\u6765\u521d\u59cb\u5316\u751f\u6210\u5668\uff0c\u7136\u540e\u8c03\u7528 generateKey() \u6216 generateKeyPair() \u751f\u6210\u5bc6\u94a5\u3002\n\u5bc6\u94a5\u5e93 (KeyStore): java.security.KeyStore \u662f\u4e00\u4e2a\u91cd\u8981\u7684\u5f15\u64ce\u7c7b\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u62bd\u8c61\u63a5\u53e3\u6765\u8bbf\u95ee\u548c\u7ba1\u7406\u5bc6\u94a5\u548c\u8bc1\u4e66\u7684\u5b58\u50a8\u5e93\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u6301\u4e45\u5316\u5b58\u50a8\u79c1\u94a5\u3001\u79d8\u5bc6\u5bc6\u94a5\u548c\u53ef\u4fe1\u8bc1\u4e66\u3002\u5e38\u89c1\u7684\u5bc6\u94a5\u5e93\u7c7b\u578b\u5305\u62ec &quot;jks&quot; (Java KeyStore, \u4e13\u6709\u683c\u5f0f) \u548c &quot;pkcs12&quot; (\u57fa\u4e8e PKCS#12 \u6807\u51c6\uff0c\u66f4\u901a\u7528)\u3002KeyStore \u63d0\u4f9b\u4e86\u52a0\u8f7d (load())\u3001\u83b7\u53d6\u6761\u76ee (getEntry())\u3001\u8bbe\u7f6e\u6761\u76ee (setEntry()) \u548c\u4fdd\u5b58 (store()) \u7b49\u65b9\u6cd5\u6765\u64cd\u4f5c\u5bc6\u94a5\u5e93\u4e2d\u7684\u5185\u5bb9\u3002\n\n6. \u8bc1\u4e66\u4e0e CRL\uff1aCertificateFactory\u8bc1\u4e66\u662f\u7528\u4e8e\u9a8c\u8bc1\u516c\u94a5\u6240\u6709\u8005\u8eab\u4efd\u7684\u6570\u5b57\u6587\u6863\uff0c\u901a\u5e38\u7531\u8bc1\u4e66\u9881\u53d1\u673a\u6784 (CA) \u7b7e\u540d\u3002\u8bc1\u4e66\u540a\u9500\u5217\u8868 (CRL) \u5217\u51fa\u4e86\u5df2\u88ab\u540a\u9500\u7684\u8bc1\u4e66\u3002java.security.cert.CertificateFactory \u662f\u4e00\u4e2a\u5f15\u64ce\u7c7b\uff0c\u7528\u4e8e\u4ece\u7f16\u7801\u683c\u5f0f\uff08\u5982 X.509\uff09\u751f\u6210\u8bc1\u4e66\u548c CRL \u5bf9\u8c61\u3002\n\u521b\u5efa\u5b9e\u4f8b\uff1a \u4f7f\u7528 getInstance(String type) \u65b9\u6cd5\u83b7\u53d6\u7279\u5b9a\u8bc1\u4e66\u7c7b\u578b\uff08\u5982 &quot;X.509&quot;\uff09\u7684 CertificateFactory \u5b9e\u4f8b\u3002\n\u751f\u6210\u8bc1\u4e66/CRL\uff1a \u901a\u8fc7 generateCertificate(InputStream inStream) \u6216 generateCertificates(InputStream inStream) \u4ece\u8f93\u5165\u6d41\u4e2d\u8bfb\u53d6\u6570\u636e\u5e76\u751f\u6210\u8bc1\u4e66\u5bf9\u8c61\u6216\u96c6\u5408\u3002\u7c7b\u4f3c\u5730\uff0c\u4f7f\u7528 generateCRL(InputStream inStream) \u6216 generateCRLs(InputStream inStream) \u751f\u6210 CRL \u5bf9\u8c61\u6216\u96c6\u5408\u3002\n\n\u638c\u63e1\u4e86\u8fd9\u4e9b\u6838\u5fc3\u7c7b\u548c\u63a5\u53e3\u7684\u529f\u80fd\uff0c\u60a8\u5c31\u638c\u63e1\u4e86\u4f7f\u7528 JCA \u6784\u5efa\u5b89\u5168\u5e94\u7528\u7684\u57fa\u77f3\u3002\u5728\u63a5\u4e0b\u6765\u7684\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u5177\u4f53\u7684\u4ee3\u7801\u793a\u4f8b\uff0c\u6f14\u793a\u5982\u4f55\u5229\u7528\u5176\u4e2d\u7684\u4e00\u4e9b\u7c7b\u6765\u5b9e\u73b0\u5e38\u89c1\u7684\u5bc6\u7801\u5b66\u64cd\u4f5c\u30024. \u5e38\u89c1 JCA \u529f\u80fd\u4f7f\u7528\u793a\u4f8b\n\u638c\u63e1\u4e86 JCA \u7684\u67b6\u6784\u548c\u6838\u5fc3\u7c7b\u4e4b\u540e\uff0c\u662f\u65f6\u5019\u901a\u8fc7\u5b9e\u9645\u4ee3\u7801\u6765\u611f\u53d7\u5b83\u7684\u5f3a\u5927\u4e4b\u5904\u4e86\u3002\u672c\u8282\u5c06\u6f14\u793a\u5982\u4f55\u5728 Java \u5e94\u7528\u7a0b\u5e8f\u4e2d\u5b9e\u73b0\u6700\u5e38\u89c1\u7684\u5bc6\u7801\u5b66\u64cd\u4f5c\u3002\u6d88\u606f\u6458\u8981\uff08Hashing\uff09\n\u6d88\u606f\u6458\u8981\u7528\u4e8e\u9a8c\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u6027\u3002\u5b83\u5c06\u4efb\u610f\u957f\u5ea6\u7684\u6570\u636e\u8f6c\u5316\u4e3a\u56fa\u5b9a\u957f\u5ea6\u7684\u201c\u6307\u7eb9\u201d\u3002\n\u6838\u5fc3\u7c7b\uff1a java.security.MessageDigest\n\u793a\u4f8b\u573a\u666f\uff1a \u8ba1\u7b97\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684 SHA-256 \u6458\u8981\u3002\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64; // \u7528\u4e8e\u5c06\u5b57\u8282\u6570\u7ec4\u8f6c\u6362\u4e3aBase64\u5b57\u7b26\u4e32\uff0c\u65b9\u4fbf\u663e\u793a\n\npublic class MessageDigestExample {\n    public static void main(String[] args) {\n        String originalMessage = &quot;Hello, JCA! This is a test message.&quot;;\n        System.out.println(&quot;\u539f\u59cb\u6d88\u606f: &quot; + originalMessage);\n\n        try {\n            // 1. \u83b7\u53d6MessageDigest\u5b9e\u4f8b\uff0c\u6307\u5b9a\u7b97\u6cd5\u4e3aSHA-256\n            MessageDigest digest = MessageDigest.getInstance(&quot;SHA-256&quot;);\n\n            // 2. \u66f4\u65b0\u6570\u636e\uff1a\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5b57\u8282\u6570\u7ec4\u5e76\u63d0\u4f9b\u7ed9\u6458\u8981\u5bf9\u8c61\n            byte[] encodedhash = digest.digest(originalMessage.getBytes(StandardCharsets.UTF_8));\n\n            // 3. \u5c06\u5b57\u8282\u6570\u7ec4\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u6216Base64\u5b57\u7b26\u4e32\u4ee5\u4fbf\u663e\u793a\n            String hexString = bytesToHex(encodedhash);\n            String base64String = Base64.getEncoder().encodeToString(encodedhash);\n\n            System.out.println(&quot;SHA-256 \u6458\u8981 (Hex): &quot; + hexString);\n            System.out.println(&quot;SHA-256 \u6458\u8981 (Base64): &quot; + base64String);\n\n            // \u9a8c\u8bc1\u5b8c\u6574\u6027\uff1a\u5982\u679c\u539f\u59cb\u6d88\u606f\u7a0d\u6709\u6539\u52a8\uff0c\u6458\u8981\u503c\u4f1a\u5b8c\u5168\u4e0d\u540c\n            String changedMessage = &quot;Hello, JCA! This is a test message. (changed)&quot;;\n            byte[] changedHash = digest.digest(changedMessage.getBytes(StandardCharsets.UTF_8));\n            System.out.println(&quot;\u4fee\u6539\u540e\u6d88\u606f\u7684 SHA-256 \u6458\u8981 (Hex): &quot; + bytesToHex(changedHash));\n\n        } catch (NoSuchAlgorithmException e) {\n            System.err.println(&quot;\u6307\u5b9a\u7684\u7b97\u6cd5\u4e0d\u5b58\u5728: &quot; + e.getMessage());\n        }\n    }\n\n    // \u8f85\u52a9\u65b9\u6cd5\uff1a\u5c06\u5b57\u8282\u6570\u7ec4\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\n    private static String bytesToHex(byte[] hash) {\n        StringBuilder hexString = new StringBuilder(2 * hash.length);\n        for (byte b : hash) {\n            String hex = Integer.toHexString(0xff &amp; b);\n            if (hex.length() == 1) {\n                hexString.append(&#39;0&#39;);\n            }\n            hexString.append(hex);\n        }\n        return hexString.toString();\n    }\n}\n\n\u4ee3\u7801\u89e3\u91ca\uff1a\n\u901a\u8fc7 MessageDigest.getInstance(&quot;SHA-256&quot;) \u83b7\u53d6\u4e00\u4e2a SHA-256 \u7b97\u6cd5\u7684 MessageDigest \u5b9e\u4f8b\u3002\n\u8c03\u7528 digest.digest() \u65b9\u6cd5\uff0c\u5c06\u8f93\u5165\u6570\u636e\u7684\u5b57\u8282\u6570\u7ec4\u4f20\u9012\u7ed9\u5b83\u3002\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u8ba1\u7b97\u6458\u8981\u5e76\u8fd4\u56de\u5b57\u8282\u6570\u7ec4\u3002\u6ce8\u610f\uff0cdigest() \u8c03\u7528\u540e\uff0cMessageDigest \u5bf9\u8c61\u4f1a\u81ea\u52a8\u91cd\u7f6e\uff0c\u53ef\u4ee5\u7528\u4e8e\u5904\u7406\u4e0b\u4e00\u6bb5\u6570\u636e\u3002\n\u6211\u4eec\u4f7f\u7528 bytesToHex \u8f85\u52a9\u65b9\u6cd5\u548c Base64.getEncoder() \u5c06\u5b57\u8282\u6570\u7ec4\u5f62\u5f0f\u7684\u6458\u8981\u8f6c\u6362\u4e3a\u53ef\u8bfb\u7684\u5341\u516d\u8fdb\u5236\u6216 Base64 \u5b57\u7b26\u4e32\u3002\n\n\u6570\u5b57\u7b7e\u540d\uff08Digital Signature\uff09\n\u6570\u5b57\u7b7e\u540d\u7528\u4e8e\u9a8c\u8bc1\u6570\u636e\u7684\u6765\u6e90\u548c\u5b8c\u6574\u6027\uff0c\u786e\u4fdd\u6570\u636e\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u672a\u88ab\u7be1\u6539\uff0c\u5e76\u4e14\u786e\u5b9e\u7531\u58f0\u79f0\u7684\u53d1\u9001\u65b9\u53d1\u51fa\u3002\n\u6838\u5fc3\u7c7b\uff1a java.security.KeyPairGenerator, java.security.Signature, java.security.PublicKey, java.security.PrivateKey\n\u793a\u4f8b\u573a\u666f\uff1a \u4f7f\u7528 RSA \u7b97\u6cd5\u5bf9\u6d88\u606f\u8fdb\u884c\u7b7e\u540d\u548c\u9a8c\u8bc1\u3002\n\nimport java.security.*;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\n\npublic class DigitalSignatureExample {\n    public static void main(String[] args) {\n        String message = &quot;This is the original message to be signed.&quot;;\n        System.out.println(&quot;\u539f\u59cb\u6d88\u606f: &quot; + message);\n\n        try {\n            // --- 1. \u751f\u6210\u5bc6\u94a5\u5bf9 (\u516c\u94a5\u548c\u79c1\u94a5) ---\n            // \u9002\u7528\u4e8e\u975e\u5bf9\u79f0\u52a0\u5bc6\u548c\u6570\u5b57\u7b7e\u540d\n            KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(&quot;RSA&quot;);\n            keyPairGen.initialize(2048); // \u521d\u59cb\u5316\u5bc6\u94a5\u751f\u6210\u5668\uff0c\u6307\u5b9a\u5bc6\u94a5\u957f\u5ea6\n            KeyPair keyPair = keyPairGen.generateKeyPair(); // \u751f\u6210\u5bc6\u94a5\u5bf9\n\n            PublicKey publicKey = keyPair.getPublic();\n            PrivateKey privateKey = keyPair.getPrivate();\n\n            System.out.println(&quot;\\n--- \u6570\u5b57\u7b7e\u540d\u8fc7\u7a0b ---&quot;);\n\n            // --- 2. \u7b7e\u540d\u6570\u636e ---\n            Signature signature = Signature.getInstance(&quot;SHA256withRSA&quot;); // \u6307\u5b9a\u7b7e\u540d\u7b97\u6cd5\n            signature.initSign(privateKey); // \u7528\u79c1\u94a5\u521d\u59cb\u5316\u7b7e\u540d\u5bf9\u8c61\n            signature.update(message.getBytes(StandardCharsets.UTF_8)); // \u63d0\u4f9b\u5f85\u7b7e\u540d\u7684\u6570\u636e\n\n            byte[] digitalSignature = signature.sign(); // \u751f\u6210\u6570\u5b57\u7b7e\u540d\n            System.out.println(&quot;\u751f\u6210\u7684\u6570\u5b57\u7b7e\u540d (Base64): &quot; + Base64.getEncoder().encodeToString(digitalSignature));\n\n            System.out.println(&quot;\\n--- \u6570\u5b57\u7b7e\u540d\u9a8c\u8bc1\u8fc7\u7a0b ---&quot;);\n\n            // --- 3. \u9a8c\u8bc1\u7b7e\u540d ---\n            Signature verifier = Signature.getInstance(&quot;SHA256withRSA&quot;); // \u540c\u6837\u4f7f\u7528\u7b7e\u540d\u7b97\u6cd5\n            verifier.initVerify(publicKey); // \u7528\u516c\u94a5\u521d\u59cb\u5316\u9a8c\u8bc1\u5bf9\u8c61\n            verifier.update(message.getBytes(StandardCharsets.UTF_8)); // \u63d0\u4f9b\u539f\u59cb\u6d88\u606f\u6570\u636e\n\n            boolean verified = verifier.verify(digitalSignature); // \u9a8c\u8bc1\u7b7e\u540d\n            System.out.println(&quot;\u7b7e\u540d\u9a8c\u8bc1\u7ed3\u679c: &quot; + (verified ? &quot;\u6210\u529f&quot; : &quot;\u5931\u8d25&quot;));\n\n            // \u5c1d\u8bd5\u7be1\u6539\u6d88\u606f\u540e\u9a8c\u8bc1\n            System.out.println(&quot;\\n--- \u5c1d\u8bd5\u7be1\u6539\u6d88\u606f\u540e\u9a8c\u8bc1 ---&quot;);\n            String tamperedMessage = &quot;This is the original message to be signed. (TAMPERED)&quot;;\n            verifier.initVerify(publicKey); // \u91cd\u65b0\u521d\u59cb\u5316\u9a8c\u8bc1\u5bf9\u8c61\n            verifier.update(tamperedMessage.getBytes(StandardCharsets.UTF_8)); // \u63d0\u4f9b\u88ab\u7be1\u6539\u7684\u6d88\u606f\n            boolean tamperedVerified = verifier.verify(digitalSignature);\n            System.out.println(&quot;\u7be1\u6539\u540e\u7b7e\u540d\u9a8c\u8bc1\u7ed3\u679c: &quot; + (tamperedVerified ? &quot;\u6210\u529f&quot; : &quot;\u5931\u8d25&quot;));\n\n        } catch (NoSuchAlgorithmException | InvalidKeyException | SignatureException e) {\n            System.err.println(&quot;\u53d1\u751f\u9519\u8bef: &quot; + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}\n\n\u4ee3\u7801\u89e3\u91ca\uff1a\n\u751f\u6210\u5bc6\u94a5\u5bf9\uff1a \u4f7f\u7528 KeyPairGenerator.getInstance(&quot;RSA&quot;) \u83b7\u53d6 RSA \u5bc6\u94a5\u5bf9\u751f\u6210\u5668\uff0c\u5e76\u6307\u5b9a\u5bc6\u94a5\u957f\u5ea6\uff082048\u4f4d\uff09\u3002generateKeyPair() \u65b9\u6cd5\u751f\u6210\u5305\u542b\u516c\u94a5\u548c\u79c1\u94a5\u7684 KeyPair \u5bf9\u8c61\u3002\n\u7b7e\u540d\uff1a\n\u901a\u8fc7 Signature.getInstance(&quot;SHA256withRSA&quot;) \u83b7\u53d6\u7b7e\u540d\u5b9e\u4f8b\uff0c&quot;SHA256withRSA&quot; \u8868\u793a\u4f7f\u7528 SHA-256 \u7b97\u6cd5\u5bf9\u6570\u636e\u8fdb\u884c\u54c8\u5e0c\uff0c\u7136\u540e\u7528 RSA \u7b97\u6cd5\u8fdb\u884c\u7b7e\u540d\u3002\ninitSign(privateKey) \u7528\u79c1\u94a5\u521d\u59cb\u5316\u7b7e\u540d\u5bf9\u8c61\uff0c\u8fdb\u5165\u7b7e\u540d\u6a21\u5f0f\u3002\nupdate() \u4f20\u5165\u9700\u8981\u7b7e\u540d\u7684\u6570\u636e\u3002\nsign() \u751f\u6210\u6700\u7ec8\u7684\u6570\u5b57\u7b7e\u540d\u3002\n\n\n\u9a8c\u8bc1\uff1a\n\u540c\u6837\u901a\u8fc7 Signature.getInstance(&quot;SHA256withRSA&quot;) \u83b7\u53d6\u7b7e\u540d\u5b9e\u4f8b\u3002\ninitVerify(publicKey) \u7528\u516c\u94a5\u521d\u59cb\u5316\u9a8c\u8bc1\u5bf9\u8c61\uff0c\u8fdb\u5165\u9a8c\u8bc1\u6a21\u5f0f\u3002\nupdate() \u4f20\u5165\u539f\u59cb\u7684\uff08\u672a\u7be1\u6539\u7684\uff09\u6570\u636e\u3002\nverify(digitalSignature) \u4f20\u5165\u6536\u5230\u7684\u6570\u5b57\u7b7e\u540d\u3002\u5982\u679c\u6570\u636e\u672a\u88ab\u7be1\u6539\u4e14\u7b7e\u540d\u6709\u6548\uff0c\u5c06\u8fd4\u56de true\u3002\n\n\n\n\u52a0\u89e3\u5bc6\uff08Encryption/Decryption\uff09\n\u52a0\u89e3\u5bc6\u7528\u4e8e\u4fdd\u62a4\u6570\u636e\u7684\u673a\u5bc6\u6027\uff0c\u9632\u6b62\u672a\u6388\u6743\u8bbf\u95ee\u3002\u8fd9\u91cc\u6211\u4eec\u4ee5\u5e38\u7528\u7684\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5 AES \u4e3a\u4f8b\u3002\n\u6838\u5fc3\u7c7b\uff1a javax.crypto.KeyGenerator, javax.crypto.Cipher, javax.crypto.spec.SecretKeySpec, javax.crypto.spec.IvParameterSpec\n\u793a\u4f8b\u573a\u666f\uff1a \u4f7f\u7528 AES/CBC/PKCS5Padding \u6a21\u5f0f\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u52a0\u89e3\u5bc6\u3002\n\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec; // \u5bf9\u4e8eCBC\u6a21\u5f0f\uff0c\u9700\u8981\u521d\u59cb\u5316\u5411\u91cfIV\nimport javax.crypto.spec.SecretKeySpec;\nimport java.nio.charset.StandardCharsets;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.InvalidKeyException;\nimport java.security.InvalidAlgorithmParameterException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.IllegalBlockSizeException;\nimport java.security.SecureRandom; // \u7528\u4e8e\u751f\u6210\u968f\u673aIV\nimport java.util.Base64;\n\npublic class EncryptionDecryptionExample {\n\n    // AES \u52a0\u5bc6/\u89e3\u5bc6\u4f7f\u7528\u7684\u8f6c\u6362\u6a21\u5f0f\n    private static final String TRANSFORMATION = &quot;AES/CBC/PKCS5Padding&quot;;\n    private static final String ALGORITHM = &quot;AES&quot;;\n\n    public static void main(String[] args) {\n        String originalText = &quot;Hello, JCA! This is a secret message to be encrypted.&quot;;\n        System.out.println(&quot;\u539f\u59cb\u6587\u672c: &quot; + originalText);\n\n        try {\n            // --- 1. \u751f\u6210\u5bc6\u94a5\u548c\u521d\u59cb\u5316\u5411\u91cf (IV) ---\n            // \u5bf9\u4e8e\u5bf9\u79f0\u52a0\u5bc6\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u79d8\u5bc6\u5bc6\u94a5\n            KeyGenerator keyGen = KeyGenerator.getInstance(ALGORITHM);\n            keyGen.init(256); // AES\u652f\u6301128, 192, 256\u4f4d\u5bc6\u94a5\n            SecretKey secretKey = keyGen.generateKey();\n\n            // \u5bf9\u4e8eCBC\u6a21\u5f0f\uff0c\u9700\u8981\u4e00\u4e2a\u968f\u673a\u7684\u521d\u59cb\u5316\u5411\u91cf (IV)\n            SecureRandom secureRandom = new SecureRandom();\n            byte[] iv = new byte[16]; // AES\u5757\u5927\u5c0f\u4e3a16\u5b57\u8282\n            secureRandom.nextBytes(iv);\n            IvParameterSpec ivSpec = new IvParameterSpec(iv);\n\n            System.out.println(&quot;\\n--- \u6570\u636e\u52a0\u5bc6\u8fc7\u7a0b ---&quot;);\n\n            // --- 2. \u52a0\u5bc6\u6570\u636e ---\n            Cipher cipher = Cipher.getInstance(TRANSFORMATION);\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec); // \u521d\u59cb\u5316\u4e3a\u52a0\u5bc6\u6a21\u5f0f\uff0c\u4f20\u5165\u5bc6\u94a5\u548cIV\n\n            byte[] encryptedBytes = cipher.doFinal(originalText.getBytes(StandardCharsets.UTF_8));\n            String encryptedTextBase64 = Base64.getEncoder().encodeToString(encryptedBytes);\n            String ivBase64 = Base64.getEncoder().encodeToString(iv); // IV\u4e5f\u9700\u8981\u4f20\u8f93\u7ed9\u89e3\u5bc6\u65b9\n\n            System.out.println(&quot;\u52a0\u5bc6\u540e\u7684\u6587\u672c (Base64): &quot; + encryptedTextBase64);\n            System.out.println(&quot;\u4f7f\u7528\u7684 IV (Base64): &quot; + ivBase64);\n\n            System.out.println(&quot;\\n--- \u6570\u636e\u89e3\u5bc6\u8fc7\u7a0b ---&quot;);\n\n            // --- 3. \u89e3\u5bc6\u6570\u636e ---\n            // \u89e3\u5bc6\u65f6\u9700\u8981\u76f8\u540c\u7684\u5bc6\u94a5\u548cIV\n            byte[] retrievedIv = Base64.getDecoder().decode(ivBase64); // \u4ece\u4f20\u8f93\u4e2d\u83b7\u53d6IV\n            IvParameterSpec retrievedIvSpec = new IvParameterSpec(retrievedIv);\n\n            cipher.init(Cipher.DECRYPT_MODE, secretKey, retrievedIvSpec); // \u521d\u59cb\u5316\u4e3a\u89e3\u5bc6\u6a21\u5f0f\uff0c\u4f20\u5165\u5bc6\u94a5\u548cIV\n\n            byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedTextBase64));\n            String decryptedText = new String(decryptedBytes, StandardCharsets.UTF_8);\n\n            System.out.println(&quot;\u89e3\u5bc6\u540e\u7684\u6587\u672c: &quot; + decryptedText);\n\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException\n                | InvalidAlgorithmParameterException | IllegalBlockSizeException | BadPaddingException e) {\n            System.err.println(&quot;\u53d1\u751f\u9519\u8bef: &quot; + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}\n\n\u4ee3\u7801\u89e3\u91ca\uff1a\n\u751f\u6210\u5bc6\u94a5\u548c IV\uff1a\nKeyGenerator.getInstance(&quot;AES&quot;) \u83b7\u53d6 AES \u5bc6\u94a5\u751f\u6210\u5668\u3002\nkeyGen.init(256) \u521d\u59cb\u5316\u751f\u6210\u5668\uff0c\u6307\u5b9a\u5bc6\u94a5\u957f\u5ea6\u4e3a 256 \u4f4d\uff08AES \u652f\u6301 128, 192, 256\uff09\u3002\ngenerateKey() \u751f\u6210 SecretKey\u3002\n\u5bf9\u4e8e CBC \u6a21\u5f0f\uff08\u6216\u4efb\u4f55\u5757\u6a21\u5f0f\uff09\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a\u968f\u673a\u7684\u521d\u59cb\u5316\u5411\u91cf (IV)\u3002SecureRandom \u7528\u4e8e\u751f\u6210\u52a0\u5bc6\u5b89\u5168\u7684\u968f\u673a IV\uff0c\u5176\u957f\u5ea6\u901a\u5e38\u4e0e\u7b97\u6cd5\u7684\u5757\u5927\u5c0f\uff08AES \u4e3a 16 \u5b57\u8282\uff09\u76f8\u540c\u3002IvParameterSpec \u7528\u4e8e\u5c01\u88c5 IV\u3002\n\n\n\u52a0\u5bc6\uff1a\nCipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;) \u83b7\u53d6 Cipher \u5b9e\u4f8b\u3002\u8fd9\u91cc\u7684 &quot;AES/CBC/PKCS5Padding&quot; \u6307\u5b9a\u4e86\u7b97\u6cd5\uff08AES\uff09\u3001\u64cd\u4f5c\u6a21\u5f0f\uff08CBC\uff0c\u5bc6\u6587\u5206\u7ec4\u94fe\u63a5\u6a21\u5f0f\uff09\u548c\u586b\u5145\u65b9\u5f0f\uff08PKCS5Padding\uff09\u3002\ncipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec) \u5c06 Cipher \u521d\u59cb\u5316\u4e3a\u52a0\u5bc6\u6a21\u5f0f\uff0c\u4f20\u5165\u4e4b\u524d\u751f\u6210\u7684 SecretKey \u548c IvParameterSpec\u3002\ncipher.doFinal() \u6267\u884c\u6700\u7ec8\u7684\u52a0\u5bc6\u64cd\u4f5c\uff0c\u8fd4\u56de\u52a0\u5bc6\u540e\u7684\u5b57\u8282\u6570\u7ec4\u3002\u6211\u4eec\u5c06\u5176\u8f6c\u6362\u4e3a Base64 \u5b57\u7b26\u4e32\u4ee5\u4fbf\u4e8e\u663e\u793a\u548c\u4f20\u8f93\u3002\u8bf7\u6ce8\u610f\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0cIV \u4e5f\u5fc5\u987b\u5b89\u5168\u5730\u4e0e\u5bc6\u6587\u4e00\u8d77\u4f20\u8f93\u7ed9\u63a5\u6536\u65b9\u3002\n\n\n\u89e3\u5bc6\uff1a\n\u89e3\u5bc6\u65f6\uff0c\u9700\u8981\u4f7f\u7528\u4e0e\u52a0\u5bc6\u65f6\u76f8\u540c\u7684\u5bc6\u94a5\u548c\u76f8\u540c\u7684 IV\u3002\ncipher.init(Cipher.DECRYPT_MODE, secretKey, retrievedIvSpec) \u5c06 Cipher \u521d\u59cb\u5316\u4e3a\u89e3\u5bc6\u6a21\u5f0f\u3002\ncipher.doFinal() \u6267\u884c\u89e3\u5bc6\u64cd\u4f5c\uff0c\u8fd4\u56de\u539f\u59cb\u6570\u636e\u7684\u5b57\u8282\u6570\u7ec4\u3002\n\n\n\n\u597d\u7684\uff0c\u6211\u4eec\u6765\u5b8c\u6210\u535a\u5ba2\u7684\u201c\u603b\u7ed3\u201d\u90e8\u5206\u3002\u8fd9\u90e8\u5206\u5c06\u56de\u987e JCA \u7684\u91cd\u8981\u6027\uff0c\u5e76\u5bf9\u5168\u6587\u8fdb\u884c\u6982\u62ec\u30025. \u603b\u7ed3\n\u901a\u8fc7\u672c\u6587\u7684\u4ecb\u7ecd\uff0c\u76f8\u4fe1\u60a8\u5df2\u7ecf\u5bf9 Java \u5bc6\u7801\u5b66\u67b6\u6784\uff08JCA\uff09\u6709\u4e86\u66f4\u6df1\u5165\u7684\u7406\u89e3\u3002\u6211\u4eec\u4ece JCA \u7684\u6838\u5fc3\u8bbe\u8ba1\u7406\u5ff5\u2014\u2014\u5b9e\u73b0\u72ec\u7acb\u6027\u3001\u5b9e\u73b0\u4e92\u64cd\u4f5c\u6027\u548c\u7b97\u6cd5\u53ef\u6269\u5c55\u6027\u5165\u624b\uff0c\u8be6\u7ec6\u63a2\u8ba8\u4e86\u5176Provider \u67b6\u6784\u4ee5\u53ca\u5f15\u64ce\u7c7b\u4e0e SPI \u7684\u5de5\u4f5c\u673a\u5236\uff0c\u5b83\u4eec\u5171\u540c\u6784\u6210\u4e86 JCA \u5f3a\u5927\u800c\u7075\u6d3b\u7684\u57fa\u7840\u3002\u6211\u4eec\u8fd8\u8be6\u7ec6\u4ecb\u7ecd\u4e86 JCA \u4e2d\u7684\u4e00\u7cfb\u5217\u6838\u5fc3\u7c7b\u548c\u63a5\u53e3\uff0c\u5b83\u4eec\u662f\u60a8\u5728\u7f16\u5199\u5b89\u5168\u76f8\u5173\u4ee3\u7801\u65f6\u7684\u91cd\u8981\u5de5\u5177\uff0c\u5305\u62ec\u7528\u4e8e\u751f\u6210\u5b89\u5168\u968f\u673a\u6570\u7684 SecureRandom\uff0c\u9a8c\u8bc1\u6570\u636e\u5b8c\u6574\u6027\u7684 MessageDigest\uff0c\u5b9e\u73b0\u8eab\u4efd\u8ba4\u8bc1\u548c\u9632\u7be1\u6539\u7684 Signature\uff0c\u4ee5\u53ca\u4fdd\u969c\u6570\u636e\u673a\u5bc6\u6027\u7684 Cipher\u3002\u6700\u540e\uff0c\u901a\u8fc7\u5b9e\u9645\u7684 Java \u4ee3\u7801\u793a\u4f8b\uff0c\u6211\u4eec\u6f14\u793a\u4e86\u5982\u4f55\u5229\u7528\u8fd9\u4e9b\u7c7b\u6765\u5b8c\u6210\u6d88\u606f\u6458\u8981\u3001\u6570\u5b57\u7b7e\u540d\u548c\u6570\u636e\u52a0\u89e3\u5bc6\u8fd9\u4e9b\u5e38\u89c1\u7684\u5bc6\u7801\u5b66\u64cd\u4f5c\u3002JCA \u7684\u6838\u5fc3\u4ef7\u503c\u5728\u4e8e\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6807\u51c6\u5316\u7684\u3001\u53ef\u63d2\u62d4\u7684\u6846\u67b6\uff0c\u4f7f\u5f97\u5f00\u53d1\u8005\u80fd\u591f\u8f7b\u677e\u5730\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u96c6\u6210\u591a\u6837\u5316\u7684\u5bc6\u7801\u5b66\u529f\u80fd\uff0c\u800c\u65e0\u9700\u9677\u5165\u5e95\u5c42\u7b97\u6cd5\u5b9e\u73b0\u7684\u590d\u6742\u7ec6\u8282\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u7075\u6d3b\u5730\u9009\u62e9\u4e0d\u540c\u7684 Provider\uff0c\u5229\u7528\u6700\u65b0\u7684\u7b97\u6cd5\u6216\u786c\u4ef6\u52a0\u901f\uff0c\u540c\u65f6\u4fdd\u6301\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u7684\u9ad8\u5ea6\u53ef\u79fb\u690d\u6027\u3002\u7136\u800c\uff0c\u5bc6\u7801\u5b66\u662f\u4e00\u4e2a\u590d\u6742\u4e14\u4e0d\u65ad\u53d1\u5c55\u7684\u9886\u57df\u3002\u867d\u7136 JCA \u6781\u5927\u5730\u7b80\u5316\u4e86\u5bc6\u7801\u5b66\u529f\u80fd\u7684\u4f7f\u7528\uff0c\u4f46\u5728\u5b9e\u9645\u7684\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u4ecd\u7136\u9700\u8981\u5bf9\u6240\u9009\u7b97\u6cd5\u7684\u7279\u6027\u3001\u5bc6\u94a5\u7ba1\u7406\u7b56\u7565\u3001\u6570\u636e\u4f20\u8f93\u5b89\u5168\u7b49\u6709\u6df1\u5165\u7684\u7406\u89e3\uff0c\u5e76\u9075\u5faa\u6700\u65b0\u7684\u5b89\u5168\u6700\u4f73\u5b9e\u8df5\u3002", "categories": [{"name": "Coding", "slug": "Coding", "permalink": "/category/Coding/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/tag/Java/"}]}, {"title": "Install pdftotext with Anaconda3", "date": "2025-04-23T08:43:15+08.00", "path": "/archives/install-pdftotext-with-anaconda3/", "text": "\u89e3\u51b3Anaconda3\u4f9d\u8d56\u5b89\u88c5\u7f13\u6162\u96be\u9898\uff1apdftotext\u5b89\u88c5\u8fc7\u7a0b\u5168\u8bb0\u5f55\n\u80cc\u666f\u9700\u6c42\n\u5728\u5f00\u53d1\u7535\u5b50\u4e66\u89e3\u6790\u5de5\u5177\u65f6\uff0c\u6211\u9700\u8981\u901a\u8fc7Python\u63d0\u53d6PDF\u6587\u672c\u5185\u5bb9\u3002pdftotext\u4f5c\u4e3a\u9ad8\u6548\u7684PDF\u89e3\u6790\u5e93\u6210\u4e3a\u9996\u9009\uff0c\u4f46\u6ca1\u60f3\u5230\u4f9d\u8d56\u5b89\u88c5\u8fc7\u7a0b\u5982\u6b64\u8270\u96be\uff0c\u7adf\u8ba9\u6211\u7ecf\u5386\u4e868\u5c0f\u65f6\u7684&quot;\u6e21\u52ab\u5f0f&quot;\u5b89\u88c5\u5386\u7a0b\u3002\n\u8e29\u5751\u5168\u8bb0\u5f55\n\u7b2c\u4e00\u9636\u6bb5\uff1apip\u5b89\u88c5\u906d\u9047C++\u73af\u5883\u7f3a\u5931\npip install pdftotext --global-option=build_ext...\n\n\u906d\u9047\u7ecf\u5178\u9519\u8bef\u63d0\u793a\uff1a\nerror: Microsoft Visual C++ 14.0 or greater is required.\n\n\u5e94\u5bf9\u65b9\u6848\uff1a\u5b89\u88c5 Microsoft C++ Build Tools \uff0c\u516c\u53f8\u7f51\u7edc\u8f83\u6162\uff0c\u7ecf\u8fc7\u4e24\u4e2a\u5c0f\u65f6\u7684\u6f2b\u957f\u7b49\u5f85\uff0c\u7ec8\u4e8e\u5b89\u88c5\u6210\u529f\u4e86\u3002\u3002\u5b89\u88c5\u5b8c Build Tools \u540e\uff0c\u65b0\u7684\u62e6\u8def\u864e\u51fa\u73b0\u4e86\u2014\u2014poppler-cpp\u4f9d\u8d56\u7f3a\u5931\u3002\u7b2c\u4e8c\u9636\u6bb5\uff1apoppler\u4f9d\u8d56\u7684\u6b7b\u4ea1\u5faa\u73af\n\u901a\u8fc7MSYS2\u624b\u52a8\u5b89\u88c5poppler\u540e\uff0c\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u59cb\u7ec8\u4e0d\u751f\u6548\uff1a$ pkg-config --cflags --libs poppler-cpp\nPackage &#39;poppler-cpp&#39; not found\n\n\u6b64\u65f6\u9677\u5165\u4f9d\u8d56\u8ff7\u5bab\uff1a\n\u624b\u52a8\u7f16\u8bd1poppler\u8017\u65f6\u4e14\u6613\u51fa\u9519\nWindows\u73af\u5883\u4e0b\u7684\u8def\u5f84\u914d\u7f6e\u590d\u6742\u5ea6\u9661\u589e\n\u65e7\u7248Anaconda\u7684\u4f9d\u8d56\u89e3\u6790\u7b97\u6cd5\u5b58\u5728\u4e25\u91cd\u6027\u80fd\u95ee\u9898\n\n\u7b2c\u4e09\u9636\u6bb5\uff1aAnaconda\u7248\u672c\u7684\u6b63\u786e\u6289\u62e9\n\u6839\u636e\u5927\u6a21\u578b\u5efa\u8bae\u5b89\u88c5Anaconda3-2020.11\u7248\u672c\u540e\uff0c\u906d\u9047\u4f9d\u8d56\u89e3\u6790\u8017\u65f6\u9ed1\u6d1e\uff1a\n1\u5c0f\u65f6\u7b49\u5f85\u65e0\u8fdb\u5c55\n\u624b\u52a8\u5b89\u88c5poppler\u540e\u4ecd\u62a5\u76f8\u540c\u9519\u8bef\n\n\u7834\u5c40\u5173\u952e\uff1a\u679c\u65ad\u66f4\u6362\u6700\u65b0\u7248Anaconda3-2024.10\uff0c\u5e76\u914d\u7f6e\u56fd\u5185\u955c\u50cf\u6e90\uff1aconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge\n\n\u6700\u7ec8\u80dc\u5229\u65f6\u523b\nconda install pdftotext  # \u56fd\u5185\u955c\u50cf+\u65b0\u7248conda=3\u5206\u949f\u5b8c\u6210\u5b89\u88c5\n\n\n\u6280\u672f\u8981\u70b9\u603b\u7ed3\n1. \u73af\u5883\u642d\u5efa\u9ec4\u91d1\u6cd5\u5219\n\n\u65b0\u7248\u5de5\u5177\u4f18\u5148\uff1aAnaconda2024\u76f8\u8f83\u65e7\u7248\u5728\u4f9d\u8d56\u89e3\u6790\u901f\u5ea6\u4e0a\u6709\u4ee3\u9645\u5dee\u8ddd\n\u955c\u50cf\u6e90\u6807\u914d\u5316\uff1a\u56fd\u5185\u955c\u50cf\u901f\u5ea6\u63d0\u5347\u53ef\u8fbe10\u500d\uff08\u5b9e\u6d4b\u4e0b\u8f7d\u901f\u5ea6\u4ece20KB/s\u21922MB/s\uff09\nC++\u73af\u5883\u9884\u88c5\uff1a\u63d0\u524d\u5b89\u88c5VC++14+\u53ef\u907f\u514d80%\u7684Python\u5305\u7f16\u8bd1\u9519\u8bef\n\n2. \u4f9d\u8d56\u7ba1\u7406\u6280\u5de7\n\ngraph LR\nA[\u5b89\u88c5\u62a5\u9519] --&gt; B{\u68c0\u67e5\u9519\u8bef\u7c7b\u578b}\nB --&gt;|C++\u76f8\u5173| C[\u5b89\u88c5Build Tools]\nB --&gt;|\u4f9d\u8d56\u7f3a\u5931| D[conda\u4f18\u5148\u4e8epip]\nD --&gt; E[\u914d\u7f6e\u955c\u50cf\u6e90]\nE --&gt; F[\u65b0\u7248Anaconda]\n\n3. pdftotext\u7684\u5c40\u9650\u8ba4\u77e5\n\n\u7eaf\u6587\u672c\u63d0\u53d6\uff1a\u2605\u2605\u2605\u2605\u2606\n\u516c\u5f0f/\u8868\u683c\u89e3\u6790\uff1a\u2605\u2606\u2606\u2606\uff08\u8f6c\u4e3a\u7eaf\u6587\u672c\u540e\u683c\u5f0f\u4e22\u5931\uff09\n\u590d\u6742\u7248\u5f0f\u5904\u7406\uff1a\u5efa\u8bae\u7ed3\u5408PDFMiner\u7b49\u5de5\u5177\u534f\u540c\u5de5\u4f5c\n\n\n\u7ecf\u9a8c\u5347\u534e\n\n\u5927\u6a21\u578b\u4f7f\u7528\u8fb9\u754c\uff1aAI\u52a9\u624b\u53ef\u63d0\u4f9b\u89e3\u51b3\u601d\u8def\uff0c\u4f46\u5177\u4f53\u8def\u5f84\u9a8c\u8bc1\u4ecd\u9700\u4eba\u5de5\u5224\u65ad\n\u73af\u5883\u9694\u79bb\u5fc5\u8981\u6027\uff1a\u5168\u7a0b\u5728\u865a\u62df\u73af\u5883\u4e2d\u64cd\u4f5c\uff0c\u907f\u514d\u6c61\u67d3\u7cfb\u7edf\u73af\u5883\n\u9519\u8bef\u65e5\u5fd7\u5206\u6790\u6cd5\uff1a\u91cd\u70b9\u89c2\u5bdferror\u5173\u952e\u8bcd\u540e\u7684\u7b2c\u4e00\u6bb5\u6709\u6548\u4fe1\u606f\n\n\n\u540e\u8bb0\uff1a\u5f53\u770b\u5230\u7ec8\u7aef\u7ec8\u4e8e\u51fa\u73b0Successfully installed pdftotext-3.0.0\u65f6\uff0c\u7a97\u5916\u5df2\u662f\u534e\u706f\u521d\u4e0a\u3002\u8fd9\u573a\u5b89\u88c5\u6218\u5f79\u6559\u4f1a\u6211\u7684\u4e0d\u4ec5\u662f\u6280\u672f\u89e3\u51b3\u4e4b\u9053\uff0c\u66f4\u662f\u5bf9\u5de5\u5177\u94fe\u751f\u6001\u7684\u6df1\u523b\u7406\u89e3\u2014\u2014\u5728Python\u7684\u4e16\u754c\u91cc\uff0c\u6709\u65f6\u5019\u9009\u5bf9\u5de5\u5177\u7248\u672c\u6bd4\u5199\u4ee3\u7801\u66f4\u91cd\u8981\u3002\n", "categories": [{"name": "Coding", "slug": "Coding", "permalink": "/category/Coding/"}], "tags": [{"name": "Python", "slug": "Python", "permalink": "/tag/Python/"}, {"name": "Anaconda3", "slug": "Anaconda3", "permalink": "/tag/Anaconda3/"}]}, {"title": "rc-initializr", "date": "2025-03-20T20:19:16+08.00", "path": "/archives/rc-initializr/", "text": "Spring Initializr \u662f\u4e00\u4e2a\u57fa\u4e8eWeb\u7684\u5de5\u5177\uff0c\u53ef\u5feb\u901f\u521b\u5efaSpringBoot\u9879\u76ee\u3002\u4e00\u4e9b\u6d41\u884c\u7684IDE\uff0c\u6bd4\u5982Intellij IDEA\uff0c\u5df2\u7ecf\u96c6\u6210\u4e86Spring Initializr\uff0c\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u521b\u5efa\u4e00\u4e2aSpirngBoot\u9879\u76ee\u3002\u5b98\u65b9\u63d0\u4f9b\u7684Spring Initializr\u751f\u6210\u7684SpringBoot\u9879\u76ee\u5341\u5206\u7b80\u5355\uff0c\u5982\u4e0b\u6240\u793a\uff1a\u6211\u4eec\u5728\u65e5\u5e38\u5f00\u53d1\u4e2d\uff0c\u7ecf\u5e38\u9700\u8981\u521b\u5efa\u5404\u79cd\u9879\u76ee\uff0c\u800c\u8fd9\u4e9b\u9879\u76ee\u4e4b\u95f4\uff0c\u53ef\u80fd\u5b58\u5728\u5927\u91cf\u76f8\u540c\uff0c\u751a\u81f3\u7c7b\u4f3c\u7684\u4ee3\u7801\uff0c\u6bd4\u5982Redis\u914d\u7f6e\u7c7b\u3001Quartz\u914d\u7f6e\u7c7b\u3001\u4e00\u4e9b\u5e38\u7528\u7684\u5de5\u5177\u7c7b\u7b49\u7b49\u3002\u4e3a\u4e86\u5728\u521b\u5efa\u65b0\u7684\u9879\u76ee\u65f6\uff0c\u4e00\u5e76\u751f\u6210\u8fd9\u4e9b\u53ef\u91cd\u590d\u4f7f\u7528\u7684\u4ee3\u7801\uff0crc-initializr\u8bde\u751f\u4e86\uff0c\u5b83\u662f\u57fa\u4e8eSpring Initializr\u5b9a\u5236\u7684\u9879\u76ee\u751f\u6210\u5668\u3002\u4e0b\u9762\u4ee5Intellij IDEA\u4e3a\u4f8b\uff0c\u6f14\u793a\u5982\u4f55\u4f7f\u7528rc-initializr\u521b\u5efa\u9879\u76ee\uff1a(1)  \u6253\u5f00Intellij IDEA\uff0c\u8fdb\u5165New Project\u754c\u9762step1.png\u4fee\u6539Service Url\u4e3a\uff1ahttp://localhost:8080 (\u672c\u5730\u542f\u52a8\u7684\u670d\u52a1\u5730\u5740\uff0c\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u586b\u5199)\u8f93\u5165\u9879\u76ee\u4fe1\u606f\u540e\uff0c\u70b9\u51fbNext(2) \u9009\u62e9SpringBoot\u7248\u672c\u548c\u4f9d\u8d56step2.png\u9ed8\u8ba4\u6dfb\u52a0\u7684\u4f9d\u8d56\uff1aspring-web, spring-data-redis, jedis, quartz, validation, apache-commons-pool, apache-commons-lang3, commons-collections, lombok, spring-data-jpa.(3) \u70b9\u51fbFinish\uff0c\u9879\u76ee\u521b\u5efa\u6210\u529f\uff0c\u76ee\u5f55\u7ed3\u6784\u5982\u4e0bstep3.png\u81f3\u6b64\uff0c\u9879\u76ee\u521b\u5efa\u5b8c\u6210\uff0c\u5305\u542b\u4e86\u6211\u4eec\u5e38\u7528\u7684\u914d\u7f6e\u4ee3\u7801\u3001\u5de5\u5177\u7c7b\u548c\u4e00\u4e9b\u4f9d\u8d56\u7b49\u3002", "categories": [{"name": "Coding", "slug": "Coding", "permalink": "/category/Coding/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/tag/Java/"}, {"name": "SpringBoot", "slug": "SpringBoot", "permalink": "/tag/SpringBoot/"}]}, {"title": "quartz-plus", "date": "2025-03-20T17:51:02+08.00", "path": "/archives/quartz-plus/", "text": "\u5728\u5de5\u4f5c\u4e2d\uff0c\u6211\u7ecf\u5e38\u4f1a\u4f7f\u7528\u5230 Quartz\uff0c\u4e00\u4e2a\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u4efb\u52a1\u8c03\u5ea6\u6846\u67b6\u3002\u7136\u800c\uff0c\u5c3d\u7ba1 Quartz \u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u529f\u80fd\uff0c\u6211\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u5374\u9047\u5230\u4e86\u4e00\u4e9b\u75db\u70b9\uff1a\nQuartz \u4e0d\u652f\u6301\u6ce8\u89e3\u7684\u65b9\u5f0f\u5b9a\u4e49Job\uff0c\u8fd9\u5bfc\u81f4\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u786c\u7f16\u7801\u7684\u65b9\u5f0f\u521b\u5efaJob\u548cTrigger\uff0c\u5e76\u624b\u52a8\u6ce8\u518c\u5230 Quartz scheduler \u4e2d\u3002\nQuartz \u672a\u63d0\u4f9b\u4efb\u52a1\u8c03\u5ea6\u7ba1\u7406\u754c\u9762\u3002\u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\uff0c\u6211\u5e38\u5e38\u9700\u8981\u624b\u52a8\u89e6\u53d1\u67d0\u4e2aJob\u7684\u6267\u884c\uff0c\u7136\u800c\u7531\u4e8e\u7f3a\u5c11\u7ba1\u7406\u9875\u9762\uff0c\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u4fee\u6539\u6570\u636e\u5e93\u4e2d trigger \u7684\u6267\u884c\u65f6\u95f4\u6765\u95f4\u63a5\u89e6\u53d1 job \u7684\u6267\u884c\uff0c\u8fd9\u663e\u7136\u4e0d\u662f\u4e00\u4e2a\u9ad8\u6548\u7684\u65b9\u5f0f\u3002\n\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u63d0\u9ad8\u5f00\u53d1\u6548\u7387\uff0c\u6211\u57fa\u4e8e Spring \u5bf9 Quartz \u8fdb\u884c\u4e86\u6269\u5c55\uff0c\u5f00\u53d1\u4e86\u4e00\u4e2a\u540d\u4e3a Quartz Plus \u7684\u5de5\u5177\u5e93\uff1a\n\u652f\u6301\u6ce8\u89e3\u7684\u65b9\u5f0f\u5feb\u901f\u5b9a\u4e49Job\u548cTrigger\uff1a\u4f7f\u7528 @QuartzJob \u548c @QuartzTrigger \u6ce8\u89e3\uff0c\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u5730\u5b9a\u4e49Job\u548cTrigger\uff0c\u5e76\u4e14\u5b83\u4eec\u4f1a\u81ea\u52a8\u6ce8\u518c\u5230Quartz Scheduler\u4e2d\u3002\n\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5e26\u6709\u7ba1\u7406\u754c\u9762\u7684 Quartz \u4efb\u52a1\u8c03\u5ea6\u4e2d\u5fc3\uff1a\u8be5\u4efb\u52a1\u8c03\u5ea6\u4e2d\u5fc3\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u7ba1\u7406\u754c\u9762\uff0c\u5305\u62ec job \u7ba1\u7406\u3001Quartz \u5b9e\u4f8b\u7ba1\u7406\u3001\u7528\u6237\u7ba1\u7406\u7b49\u529f\u80fd\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u66f4\u65b9\u4fbf\u5730\u7ba1\u7406\u548c\u76d1\u63a7\u4efb\u52a1\u8c03\u5ea6\u3002\n\n\u9879\u76ee\u6e90\u7801\u5730\u5740\uff1ahttps://github.com/TripleYuan/quartz-plus.git\u5feb\u901f\u4e0a\u624b\n\u90e8\u7f72Quartz\u4efb\u52a1\u8c03\u5ea6\u7cfb\u7edf\n\u8c03\u5ea6\u7cfb\u7edf\u5206\u4e3a\u524d\u7aef\u548c\u540e\u7aef\u4e24\u4e2a\u9879\u76ee\uff0c\u53ef\u4ee5\u5206\u5f00\u90e8\u7f72 quartz-plus-scheduler-center\uff08\u8c03\u5ea6\u670d\u52a1\uff09 \u548c quartz-plus-web-console\uff08\u524d\u7aef\u5e94\u7528\uff09\uff0c\u4e5f\u53ef\u5c06\u524d\u7aef\u4ee3\u7801\u6253\u5305\u540e\u7684\u9759\u6001\u8d44\u6e90\u6587\u4ef6\u96c6\u6210\u5230 quartz-plus-scheduler-center \u4e2d\u3002quartz-plus-scheduler-center \u9ed8\u8ba4\u4f7f\u7528\u7684\u662fH2\u6570\u636e\u5e93\uff0c\u751f\u4ea7\u73af\u5883\u5efa\u8bae\u4f7f\u7528\u5916\u90e8\u6570\u636e\u5e93\uff0c\u5982 MySQL\u3001PostgreSQL \u7b49\u3002\u7cfb\u7edf\u5185\u7f6e\u4e86\u4e24\u4e2a\u767b\u5f55\u7528\u6237\uff1a\n\u7528\u62371\uff1a\u7528\u6237\u540d\u4e3a admin\uff0c\u5bc6\u7801\u4e3a 123456\uff0c\u62e5\u6709\u7ba1\u7406\u5458\u6743\u9650\u3002\u7528\u62372\uff1a\u7528\u6237\u540d\u4e3a quartz\uff0c\u5bc6\u7801\u4e3a 123456\uff0c\u4ec5\u5177\u6709\u666e\u901a\u7528\u6237\u6743\u9650\u3002\nSpringBoot\u5e94\u7528\u63a5\u5165\n\n\u5f15\u5165\u6700\u65b0\u7248\u672c\n\n&lt;dependency&gt;\n    &lt;groupId&gt;redcoder&lt;/groupId&gt;\n    &lt;artifactId&gt;quartz-plus-core&lt;/artifactId&gt;\n    &lt;version&gt;${quartzplus.latest.version}&lt;/version&gt;\n&lt;/dependency&gt;\n\n\n\u5728\u542f\u7528\u7c7b\u4e0a\u6dfb\u52a0\u6ce8\u89e3 @QuartzJobScan\uff0c\u5e76\u6307\u5b9a job \u7c7b\u6240\u5728\u7684\u5305\u8def\u5f84\u3002\n\n@SpringBootApplication\n@QuartzJobScan(&quot;redcoder.quartzplus.demo.job&quot;)\npublic class QuartzPlusDemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(QuartzPlusDemoApplication.class, args);\n    }\n}\n\n\n\u6dfb\u52a0\u914d\u7f6e\uff0c\u6307\u5b9a\u6ce8\u518c\u4e2d\u5fc3\u670d\u52a1\u5730\u5740\n\nquartz-job-scheduler:\n  registry:\n    # \u8c03\u5ea6\u670d\u52a1\u6ce8\u518c\u5730\u5740\uff08\u66ff\u6362\u6210\u4f60\u7684IP\u548c\u7aef\u53e3\uff09\n    register-url: http://localhost:32007/api/quartz-job-scheduler/instance/register\n    # \u8c03\u5ea6\u670d\u52a1\u53d6\u6d88\u6ce8\u518c\u5730\u5740\uff08\u66ff\u6362\u6210\u4f60\u7684IP\u548c\u7aef\u53e3\uff09\n    unregister-url: http://localhost:32007/api/quartz-job-scheduler/instance/unregister\n\n\u6ce8\u89e3\u5f0f\u5b9a\u4e49Job\u548cTrigger\n\u4f7f\u7528 @QuartzJob \u548c @QuartzTrigger \u6ce8\u89e3\u5feb\u901f\u5b9a\u4e49 Job\u548cTrigger\uff1a@QuartzJob(description = &quot;\u6253\u5370 hello world&quot;)\n@QuartzTrigger(cron = &quot;0/10 * * * * ?&quot;)\npublic class HelloWorldJob implements Job {\n\n    @Override\n    public void execute(JobExecutionContext context) throws JobExecutionException {\n        System.out.println(&quot;hello world, current time: &quot; + LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));\n    }\n}\n\n", "categories": [{"name": "Coding", "slug": "Coding", "permalink": "/category/Coding/"}], "tags": [{"name": "Java", "slug": "Java", "permalink": "/tag/Java/"}, {"name": "SpringBoot", "slug": "SpringBoot", "permalink": "/tag/SpringBoot/"}]}], "pages": [{"title": "About", "date": "2025-03-19T17:26:00+08.00", "path": "/about/", "text": "\u8fd9\u91cc\u4e00\u7247\u8352\u829c\u3002\u3002\u3002", "categories": [], "tags": []}]}